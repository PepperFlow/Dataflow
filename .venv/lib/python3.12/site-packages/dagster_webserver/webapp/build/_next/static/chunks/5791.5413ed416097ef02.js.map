{"version":3,"file":"static/chunks/5791.5413ed416097ef02.js","mappings":"+hBAiBO,IAAMA,EAAqBC,IAChC,GAAM,OAACC,CAAK,CAAC,CAAGD,EAOV,MAACE,CAAI,CAAC,CANQC,CAAAA,CAMLC,CANKD,EAAAA,EAAAA,CAAQA,CAC1BE,EACA,CACEC,UAAW,OAACL,CAAK,CACnB,GAIIM,QAAML,EAAAA,KAAAA,EAAAA,EAAMM,MAANN,YAAwB,CAC9BO,EAASF,OAAAA,EAAAA,KAAAA,EAAAA,EAAKG,KAALH,KAAKG,IAAe,MAAQH,EAAIE,MAAM,CAAG,KAElDE,EAAgBC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC5B,GAAIL,OAAAA,EAAAA,KAAAA,EAAAA,EAAKG,KAALH,KAAKG,IAAe,MACtB,CAD6B,KACtB,EAAE,CAGX,GAAM,QAACD,CAAM,CAAC,CAAGF,SACjB,EAAIM,EAAcA,CAACC,GAAG,CAACL,GACdF,EAAIQ,IADmB,KACV,CAACC,MAAM,CAAC,GAAUC,EAAKR,MAAM,GAAKS,EAAAA,GAAeA,CAACC,OAAO,EAG3EC,EAAAA,EAAkBA,CAACN,GAAG,CAACL,GAClBF,EAAIQ,IADuB,KACd,CAACC,MAAM,CAAC,GAAUC,EAAKR,MAAM,GAAKS,EAAAA,GAAeA,CAACG,WAAW,EAG5E,EAAE,EACR,CAACd,EAAI,EAEFe,EAAYX,EAAcY,MAAM,CAEtC,GAAI,CAACD,GAAa,CAACb,EACjB,MADyB,CAClB,KAGT,GAAII,EAAAA,EAAcA,CAACC,GAAG,CAACL,GAAS,CAC9B,GAAkB,IAAda,EAAiB,CAEnB,IAAML,EAAON,CAAa,CAAC,EAAE,CACvBa,EAAQP,EAAKQ,OAAO,CACtBC,IAAAA,SAAY,CAAC,CAACC,YAAaC,KAAKC,KAAK,CAAgB,IAAfZ,EAAKQ,OAAO,CAAQ,EAAG,CAACK,gBAAgB,CAAI,GAClF,GACJ,MACE,WAACC,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,aAAI,aACxB,UAACC,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAiBX,MAAAA,CAARvB,GAAc,OAANuB,YAAUP,EAAKmB,OAAO,KAGjE,CACA,MACE,WAACL,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,aAAI,aACxB,WAACC,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAe,OAANlC,aAAUqB,EAAU,cAGvD,CAEA,GAAIF,EAAAA,EAAkBA,CAACN,GAAG,CAACL,GAAS,CAClC,GAAkB,IAAda,EAAiB,CAEnB,IAAML,EAAON,CAAa,CAAC,EAAE,CACvBa,EAAQP,EAAKQ,OAAO,CACtBC,IAAAA,SAAY,CAAC,CAACC,YAAaC,KAAKC,KAAK,CAAgB,IAAfZ,EAAKQ,OAAO,CAAQ,EAAG,CAACK,gBAAgB,CAAI,GAClF,GACJ,MACE,WAACC,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,aAAI,kBACnB,UAACC,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAiBX,MAAAA,CAARvB,GAAc,OAANuB,YAAUP,EAAKmB,OAAO,KAGtE,CACA,MACE,WAACL,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,aAAI,kBACnB,WAACC,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAe,OAANlC,aAAUqB,EAAU,cAG5D,CAEA,OAAO,IACT,EAAE,EAEiCe,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,8MC3D/B,IAAMC,EAAmB,IAC9B,GAAM,MAACC,CAAI,SAAEC,CAAO,MAAEC,CAAI,YAAEC,CAAU,CAAC,CAAG1C,EACpC2C,EAAQF,EAAKlB,MAAM,CAEnBN,EAAO,GADQW,KAAKgB,GAAG,CAACC,EACFC,GAExBC,EAAoC,IAAIN,EAFN,CAWtC,GAX2CO,IAGvCN,IACEA,EAAaK,EAAMxB,IADT,EACe,CAC3BwB,CAD6B,CACvBE,OAAO,IAAIC,MAAMR,EAAaK,EAAMxB,MAAM,EAAE4B,IAAI,CAAC,OAEvDJ,EAAQA,EAAMK,KAAK,CAAC,EAAGV,IAKzB,UAACW,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUC,IAAK,CAAC,WACvDV,EAAMW,GAAG,CAAC,CAACnD,EAAKoD,KACf,IAAMC,EAAUrB,EAAOsB,EAAc,CAAClB,EAAQgB,GAAK,EAAK1C,EAAO,SAC/D,EAOE,EAPE,CAAM,EAOR,KAAC6C,EAAAA,EAAOA,CAAAA,CAENC,SAAS,MACTC,gBAAgB,QAChBC,QACE,UAACC,MAAAA,UACC,UAACC,EAAAA,CAAiB5D,IAAKA,EAAK6D,KAAM5B,MAGtC6B,eAAgB,aAEhB,UAACC,EAAAA,CAAOA,CAAAA,CAActC,MAAOuC,EAAAA,EAAiB,CAAChE,EAAIE,MAAM,CAAC,CAAEmD,QAASA,GAAvDrD,EAAIiE,EAAE,GAVfjE,EAAIiE,EAAE,EANX,UAACF,EAAAA,CAAOA,CAAAA,CAAqBtC,MAAOC,EAAAA,EAAwB,GAAI2B,QAASA,GAA3D,SAAY,OAAHD,GAmB7B,IAGN,EAAE,EAO8B,OAAC,MAACS,CAAI,KAAE7D,CAAG,CAAe,GACxD,MACE,WAACkE,EAAAA,WACC,UAACC,EAAAA,UAAcN,IACf,WAACO,EAAAA,WACC,WAACtB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACE,WAAY,SAAUD,UAAW,MAAOE,IAAK,CAAC,YACxD,UAACmB,EAAAA,EAAkBA,CAAAA,CAACnE,OAAQF,EAAIE,MAAM,GACtC,UAACyB,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAgB,OAAP5B,EAAIiE,EAAE,WACvB,UAACK,EAAAA,EAAWA,CAAAA,UAAEC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAACvE,UAG9B,WAAC8C,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUE,IAAK,CAAC,YACrC,UAACsB,EAAAA,EAAOA,CAAAA,CAACxE,IAAKA,IACd,UAACyE,EAAAA,EAAeA,CAAAA,CAACzE,IAAKA,UAGzBM,EAAAA,EAAcA,CAACC,GAAG,CAACP,EAAIE,MAAM,GAAKW,EAAAA,EAAkBA,CAACN,GAAG,CAACP,EAAIE,MAAM,EAClE,UAACwE,EAAAA,UACC,UAAClF,EAAAA,CAAiBA,CAAAA,CAACE,MAAOM,EAAIiE,EAAE,KAEhC,OAGV,EAAE,EAEuBU,EAAAA,EAAMA,CAAChB,GAAG,wFAM7BQ,EAAeQ,EAAAA,EAAMA,CAAChB,GAAG,qNAEFjC,EAAAA,EAAqB,GACjCkD,EAAAA,CAAUA,CAACC,OAAO,CAGxBnD,EAAAA,EAAkB,IAOvB0C,EAASO,EAAAA,EAAMA,CAAChB,GAAG,+HAOnBe,EAAmBC,EAAAA,EAAMA,CAAChB,GAAG,oJAWvBgB,EAAAA,EAAMA,CAAChB,GAAG,yHACA,OAAC,QAACmB,CAAM,CAAC,UAAKA,GAGvB,OAAC,CAACC,UAAQ,CAAC,UAAKA,g0DCjItB,IAAMC,EAAgB,OAAC,KAAChF,CAAG,CAA2B,SAC3D,WAACiF,EAAAA,CAAKA,CAAAA,CAACjC,UAAU,MAAMkC,QAAS,EAAGjC,WAAW,mBAC5C,UAACoB,EAAAA,EAAkBA,CAAAA,CAACnE,OAAQF,EAAIE,MAAM,GACtC,UAACyB,EAAAA,EAAIA,CAAAA,CAACC,GAAI,SAAgB,OAAP5B,EAAIiE,EAAE,EAAIkB,OAAO,SAASC,IAAI,sBAC/C,UAACC,EAAAA,EAAIA,CAAAA,UAAEd,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAAC,CAACN,GAAIjE,EAAIiE,EAAE,WAGlC,EAEiCnC,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAOzBwD,EAA6BxD,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,GAF3C,CAoCEyD,EACAC,EAAAA,EAAiBA,CACjBC,EAAAA,EAAiBA,EACnB,EAEyBd,EAAAA,EAAMA,CAACe,KAAK,8OAe1BhE,EAAAA,EAAgB,IAE3B,EAEwDI,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAShD6D,EAAwB7D,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA2BpCyD,EACAK,EAAAA,CAAqBA,CACrBH,EAAAA,EAAiBA,CACjBI,4CACF,gICtHK,IAAMC,EAAiBC,CAAAA,EAAAA,EAAAA,IAAAA,CAAIA,CAChC,OAAC,MAAClC,CAAI,KAAE7D,CAAG,WAAEgG,GAAY,CAAK,YAAEC,GAAa,CAAI,CAAEC,cAAc,EAAI,CAAQ,GACrE,QAAChG,CAAM,CAAC,CAAGF,EAEXmG,EAAS9F,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACrB,OAAQH,GACN,KAAKkG,EAAAA,GAASA,CAACC,OAAO,CACpB,MAAO,SACT,MAAKD,EAAAA,GAASA,CAACE,QAAQ,CACvB,KAAKF,EAAAA,GAASA,CAACG,SAAS,CACxB,KAAKH,EAAAA,GAASA,CAACxF,OAAO,CACpB,MAAO,QACT,SACE,MAAO,MACX,CACF,EAAG,CAACV,EAAO,EAgCX,MACE,WAAC4C,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CACJC,UAAW,MACXwD,eAAgB,gBAChBvD,WAAY,aACZC,IAAK,EACP,YAEA,WAACJ,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUC,WAAY,aAAcC,IAAK,CAAC,YAC/D,WAACJ,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUC,IAAK,CAAC,YACvDuD,MAxCP,IAAMC,EACJ,UAACC,EAAAA,CAAGA,CAAAA,CAACR,OAAQA,WACX,WAACrD,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOC,WAAY,SAAUC,IAAK,CAAC,YACxD,UAACmB,EAAAA,EAAkBA,CAAAA,CAACnE,OAAQF,EAAIE,MAAM,CAAE0G,KAAM,KAC9C,UAACpC,EAAAA,EAAOA,CAAAA,CAACxE,IAAKA,gBAKpB,EAKE,EALE,CAKF,MALc,CAKbuD,EAAAA,EAAOA,CAAAA,CACNC,SAAS,MACTC,gBAAgB,QAChBC,QACE,UAACC,MAAAA,UACC,UAACC,EAAAA,EAAgBA,CAAAA,CAAC5D,IAAKA,EAAK6D,KAAMA,MAGtCC,eAAgB,aAEf4C,IAdIA,EAiBX,IAcSR,EAAc,UAACzB,EAAAA,EAAeA,CAAAA,CAACzE,IAAKA,IAAU,QAEhDkG,GAAgB5F,GAAAA,EAAcA,CAACC,GAAG,CAACP,EAAIE,MAAM,GAAKW,EAAAA,EAAkBA,CAACN,GAAG,CAACP,EAAIE,OAAM,EAClF,UAACV,EAAAA,CAAiBA,CAAAA,CAACE,MAAOM,EAAIiE,EAAE,QAC9B4C,KAELZ,EAAa,UAACa,EAAAA,CAAYA,CAAAA,CAAClF,GAAI,SAAgB,OAAP5B,EAAIiE,EAAE,WAAI,aAA0B,OAGnF,GACA,ktBCvDF,IAAM8C,EAAmB,cAEZC,EAA4B,OAAC,MACxCC,CAAI,CAML,GACO,CAACC,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,IAEzCC,EAAoBhH,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAC/B,IACE4G,EACIA,EAAKK,kBAAkB,CAAC7G,MAAM,CAAC,GAC7B8G,EAASC,IAAI,CAACC,IAAI,CAAC,KAAKC,QAAQ,CAACR,IAEnC,EAAE,CACR,CAACD,EAAMC,EAAY,EAGfS,EAAYC,CAAAA,EAAAA,EAAAA,MAAAA,CAAMA,CAAwB,MAC1CC,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC,CACpC1F,MAAOiF,EAAkBrG,MAAM,CAC/B+G,iBAAkB,IAAMJ,EAAUK,OAAO,CACzCC,aAAc,IAAM,GACpBC,SAAU,EACZ,GACMC,EAAcN,EAAeO,YAAY,GACzC5F,EAAQqF,EAAeQ,eAAe,GAEtCC,EAA0BjI,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACtC,IAAM8C,EAAgC,CAAC,EAIvC,aAHA8D,GAAAA,EAAMsB,YAANtB,sBAAwC,CAACuB,OAAO,CAAC,OAAC,UAACjB,CAAQ,eAAEkB,CAAa,CAAC,GACzEtF,CAAG,CAACuF,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACnB,GAAU,CAAGkB,CACpC,GACOtF,CACT,EAAG,OAAC8D,EAAAA,KAAAA,EAAAA,EAAMsB,MAANtB,4BAAwC,CAAC,EAkD7C,MACE,WAACnE,EAAAA,CAAGA,CAAAA,CAAC6F,MAAO,CAACC,OAAQ,OAAO,EAAG7F,KAAM,CAACC,UAAW,QAAQ,YACvD,WAACF,EAAAA,CAAGA,CAAAA,CACF+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EACtChG,KAAM,CAACyD,eAAgB,gBAAiBvD,WAAY,QAAQ,EAC5D+F,OAAO,mBAEP,UAACC,EAAAA,EAASA,CAAAA,UAAC,+BACX,UAACC,EAAAA,EAASA,CAAAA,CACRC,KAAK,SACLC,MAAOlC,EACPmC,SAAU,GAAOlC,EAAemC,EAAEnE,MAAM,CAACiE,KAAK,EAC9CG,YAAY,uBACZZ,MAAO,CAACa,MAAO,OAAO,OA5D5B,GAAmB,CAACnC,EAAkBrG,MAAM,CAExC,CAF0C,EAE1C,OAACyI,EAAAA,EAAyBA,CAAAA,CACxBC,MAAM,yBACNC,YACE,iCAAE,8BAC2B,UAACC,SAAAA,UAAQ1C,SAMzCD,SAAAA,KAAAA,EAAAA,CAAAA,CAAMK,kBAAkB,CAACtG,MAAAA,EAQ5B,CARoC,EAQpC,QAAC6I,EAAAA,EAASA,CAAAA,CAACC,IAAKnC,YACd,WAACoC,EAAAA,EAASA,CAAAA,CAACC,gBAAiBjD,EAAkBkD,MAAM,cAClD,UAACC,EAAAA,EAAUA,CAAAA,UAAC,UACZ,UAACA,EAAAA,EAAUA,CAAAA,UAAC,UACZ,UAACA,EAAAA,EAAUA,CAAAA,UAAC,cAEd,UAACC,EAAAA,EAAKA,CAAAA,CAACC,aAAcjC,WAClB3F,EAAMW,GAAG,CAAC,OAAC,OAACkH,CAAK,KAAEC,CAAG,MAAE1D,CAAI,OAAE2D,CAAK,CAAC,GAE7BhD,EAAWF,CAAiB,CAACgD,EAAM,CACzC,MACE,UAACG,EAAAA,CAECC,QAAS7D,EACT8D,OAAQH,EACRhD,SAAUA,EACVkB,cAAeH,CAAuB,CAACI,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACnB,GAAU,CAElEoD,aAAc1D,EAAK2D,gCAAgC,EAN9CN,EASX,QA3BF,UAACxH,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,WACzC,UAACvH,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,YAAI,aAmD9C,EAAE,EAEqB,OAAC,QACtBgJ,CAAM,SACND,CAAO,UACPlD,CAAQ,eACRkB,CAAa,cACbkC,CAAY,CAOb,GACO,CAACE,EAAQC,EAAU,CAAG1D,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAC/B2D,EAAsBtC,OAAAA,EAAAA,KAAAA,EAAAA,EAAezH,MAAAA,GAAU,EAU/C,IAVsByH,EAUrB9I,CAAI,CAAC,CATQC,CAAAA,CASLC,CATKD,EAAAA,EAAAA,CAAQA,CAC1BoL,EACA,CACEC,YAAa,oBACblL,UAAW,CACTwH,SAAU,CAACC,KAAMD,EAASC,IAAI,CAChC,CACF,GAII0D,EAAQvL,OAAAA,EAAAA,KAAAA,EAAAA,EAAMwL,MAANxL,MAAkB,CAACQ,UAAAA,IAAe,QAAUR,EAAKwL,YAAY,CAAG,KACxEC,QAAaF,EAAAA,KAAAA,EAAAA,EAAOE,OAAPF,GAAiB,CAC9BG,EAAcD,EAChBE,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACF,EAAWG,UAAU,CAAC1H,IAAI,CAAEuH,EAAWG,UAAU,CAACC,QAAQ,CAAC3H,IAAI,EAChF,KAEJ,MACE,UAAC4H,EAAAA,EAAGA,CAAAA,CAACf,OAAQA,EAAQD,QAASA,WAC5B,WAACiB,EAAAA,CAAQ1C,OAAO,mBACd,UAAC2C,EAAAA,EAAOA,CAAAA,UACN,UAACC,EAAAA,CAASA,CAAAA,CAACpE,KAAMD,EAASC,IAAI,CAAE2B,KAAK,QAAQ0C,UAAU,sBAEzD,UAACF,EAAAA,EAAOA,CAAAA,UACLhM,EACCyL,GAAcA,EAAWU,SAAS,EAAIT,EACpC,UAAC1J,EAAAA,EAAIA,CAAAA,CAACC,GAAImK,CAAAA,EAAAA,EAAAA,EAAAA,CAA4BA,CAACX,EAAWU,SAAS,CAAEvE,YAC3D,WAACzE,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,IAAK,EAAGD,WAAY,QAAQ,YACxD,UAAC+I,EAAAA,EAAIA,CAAAA,CAACvK,MAAOC,EAAAA,EAAgB,GAAImC,KAAK,gBACrCuH,EAAWU,SAAS,MAIzB,UAACtK,EAAAA,EAAOA,CAAAA,CAACC,MAAOC,EAAAA,EAAgB,YAAI,oBAGtC,UAACuK,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,gBAGrB,UAACP,EAAAA,EAAOA,CAAAA,UACLP,EACC,iCACE,WAACe,EAAAA,CAAUA,CAAAA,CAACC,QAAS,IAAMtB,EAAU,cAClCC,EAAoB,mBAAyC,IAAxBA,EAA4B,GAAK,IAAK,IAAI,eAGlF,UAACsB,EAAAA,CAAsBA,CAAAA,CACrBxB,OAAQA,EACRyB,QAAS,IAAMxB,GAAU,GACzByB,aAAc5B,EACd6B,aAAcjF,EAASC,IAAI,MAG7B,WAKd,EAEMkE,EAAU/G,CAAAA,EAAAA,EAAAA,EAAAA,CAAMA,CAAC7B,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,mHAECiE,GAOrBiE,EAAoBlJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,4/BCxLtB,IAAM2K,EAAoB,OAAC,QAChCC,CAAM,gBACNC,CAAc,CACd9B,QAAM,qBACN+B,CAAmB,SACnBN,CAAO,CACK,GACZ,MACE,WAACO,EAAAA,EAAMA,CAAAA,CACLhC,OAAQA,EACRyB,QAASA,EACT3D,MAAO,CAACa,MAAO,OAAQsD,SAAU,SAAUC,SAAU,OAAO,YAE5D,UAACC,EAAAA,CACCN,OAAQA,EACRC,eAAgBA,EAChBC,oBAAqBA,IAEvB,UAACK,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAACC,EAAAA,EAAMA,CAAAA,CAACf,QAASE,WAAS,cAIlC,EAAE,EAQ4B,OAAC,QAACI,CAAM,gBAAEC,CAAc,qBAAEC,CAAmB,CAAa,GAChF,MAACjN,CAAI,SAAEyN,CAAO,CAAC,CAAGxN,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC9ByN,EACA,CACEtN,UAAW,CAAC6M,sBAAqBF,OAAQA,GAAU,EAAE,EACrDY,KAAM,CAACZ,CACT,GAGIzF,EACJtH,OAAAA,EAAAA,KAAAA,EAAAA,EAAM4N,MAAN5N,iBAA6B,CAACQ,UAAAA,IAAe,yBACzCR,EAAAA,KAAAA,EAAAA,EAAM4N,MAAN5N,iBAA6B,CAACsH,IAAI,MAClCJ,EAEA,CAAC2G,EAAwBC,EAAyB,CAAGpN,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAW1D,OAVO4G,EAAAA,KAAAA,EAAAA,EAAMyG,MAANzG,yBAAqC,CAACxG,MAAM,CACxD,QAEEkN,SADAA,EAAQC,IAAI,GAAKC,EAAAA,GAA4BA,CAACC,cAAc,SAC5DH,GAAAA,EAAQlF,aAAAA,EAARkF,KAAAA,EAAAA,EAAuB3M,GAAvB2M,GAAuB3M,UAEXiG,EAAAA,KAAAA,EAAAA,EAAMyG,MAANzG,yBAAqC,CAACxG,MAAM,CAC1D,QAEEkN,SADAA,EAAQC,IAAI,GAAKC,EAAAA,GAA4BA,CAACE,iBAAiB,UAC/DJ,EAAAA,EAAQlF,aAAAA,EAARkF,KAAAA,EAAAA,EAAuB3M,GAAvB2M,GAAuB3M,IAEJ,CACtB,OAACiG,EAAAA,KAAAA,EAAAA,EAAMyG,MAANzG,yBAAqC,CAAC,SAE1C,EAEI,OAFS,EAET,wBACE,UAAC+G,EAAAA,EAAYA,CAAAA,CAACC,MAAO,YAAqC,OAAzBrB,EAAoB/I,IAAI,IACzD,UAACf,EAAAA,CAAGA,CAAAA,CAAC6F,MAAO,CAACE,QAAS,EAAE,EAAG9F,KAAM,CAACE,WAAY,SAAUuD,eAAgB,QAAQ,WAC9E,UAAC0H,EAAAA,CAAeA,CAAAA,CAACD,MAAM,+BAM1BhH,EAgBH,IAhBS,CAgBT,4BACE,UAAC+G,EAAAA,EAAYA,CAAAA,CACXC,MACE,iCACE,WAACE,OAAAA,WAAK,YAAUvB,EAAoB/I,IAAI,CAAC,QACzC,UAACuK,EAAAA,CAAgBA,CAAAA,CACfC,UAAWpH,EAAKoH,SAAS,CACzBC,WAAY,CAACC,cAAc,EAAOC,aAAa,CAAI,SAK3D,UAAC1L,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EAAGC,OAAO,kBACnD,UAACyF,EAAAA,CAAkBxH,KAAMA,EAAM0F,eAAgBA,MAE7B,qBAAnBA,EAAwC,UAAC3F,EAAAA,CAAyBA,CAAAA,CAACC,KAAMA,IAAW,KACjE,SAAnB0F,EACC,WAAChJ,MAAAA,CAAIgF,MAAO,CAACC,OAAQ,QAAS8F,UAAW,MAAM,YAC5CzH,EAAK0H,MAAM,CAAC3N,MAAM,CACjB,iCACE,UAAC8B,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EAAGC,OAAO,kBACnD,UAACC,EAAAA,EAASA,CAAAA,UAAC,qBAEb,UAAC2F,EAAAA,EAAOA,CAAAA,CAACD,OAAQ1H,EAAK0H,MAAM,MAE5B1H,EAAK4H,YAAY,CAAC7N,MAAM,CAC1B,UAAC8N,EAAAA,EAAeA,CAAAA,CAACD,aAAc5H,EAAK4H,YAAY,GAC9C,KACHrB,OAAAA,EAAAA,KAAAA,EAAAA,EAAwBxM,MAAAA,EACvB,gBADDwM,KACC,YACE,UAAC1K,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EAAGC,OAAO,kBACnD,UAACC,EAAAA,EAASA,CAAAA,UAAC,uBAEb,UAAC8F,EAAAA,CAAgBC,WAAYxB,OAE7B,KACHC,OAAAA,EAAAA,KAAAA,EAAAA,EAA0BzM,MAAAA,EACzB,kBADDyM,GACC,YACE,UAAC3K,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAACC,SAAU,GAAIC,WAAY,EAAE,EAAGC,OAAO,kBACnD,UAACC,EAAAA,EAASA,CAAAA,UAAC,yBAEb,UAAC8F,EAAAA,CAAgBC,WAAYvB,OAE7B,KACHxG,EAAKgI,KAAK,CACT,UAACnM,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,YACZ,UAACqG,EAAAA,EAAeA,CAAAA,CAACD,MAAOhI,EAAKgI,KAAK,KAElC,KACHhI,EAAKkI,UAAU,CACd,WAACrM,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,aACZ,UAACe,SAAAA,UAAO,iBAAqB,IAAE3C,EAAKkI,UAAU,IAE9C,QAEJ,QArEJ,iCACE,UAACnB,EAAAA,EAAYA,CAAAA,CAACC,MAAO,YAAqC,OAAzBrB,EAAoB/I,IAAI,IACzD,UAACf,EAAAA,CAAGA,CAAAA,CAAC6F,MAAO,CAACE,QAAS,EAAE,EAAG9F,KAAM,CAACE,WAAY,SAAUuD,eAAgB,QAAQ,WAC9E,UAAC4I,EAAAA,CAAaA,CAAAA,CACZjG,KAAK,aACLO,MAAM,yBACNC,YAAY,kDAkExB,EAEO,SAAS8E,EAAkB,CAMjC,MAwBmB9B,KA9Bc,MAChC1F,CAAI,gBACJ0F,CAAc,CAIf,CANiC,EAO1BxG,EAAS9F,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACrB,aAAQ4G,EAAAA,KAAAA,EAAAA,EAAM/G,MAAM,EAClB,KAAKmP,EAAAA,GAAqBA,CAACzO,OAAO,CAChC,MAAO,QACT,MAAKyO,EAAAA,GAAqBA,CAACC,OAAO,CAChC,MAAO,SACT,MAAKD,EAAAA,GAAqBA,CAAChJ,OAAO,CAChC,MAAO,SACX,CAEF,EAAG,CAACY,EAAK,EAET,MACE,+BACE,WAACtD,MAAAA,CAAIgF,MAAO,CAAC4G,QAAS,OAAQC,oBAAqB,4BAA6BtM,IAAK,EAAE,YACrF,WAACJ,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUE,IAAK,CAAC,YACrC,UAAC+F,EAAAA,EAASA,CAAAA,UAAC,WACX,WAACnG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,MAAOE,IAAK,EAAGD,WAAY,QAAQ,YACxD,UAAC0D,EAAAA,CAAGA,CAAAA,CAACR,OAAQA,WACVc,EAAK/G,MAAM,GAAKmP,EAAAA,GAAqBA,CAACC,OAAO,CAC5C,cAEA,iCACG,OAAC3C,EAAAA,sBAAyC,CAAE,YAAY1F,EAErDA,EAFwD,MAE7C,CAACjG,MAAM,CADlBiG,EAAKwI,WADP9C,uBAEc3L,EAFd2L,EAEyB,EAAG,IAAI,iBAKvC1F,EAAKgI,KAAK,CACT,UAAC9C,EAAAA,CAAUA,CAAAA,CACTC,QAAS,KACPsD,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CACdhG,MAAO,aAEPiG,KAAM,UAACT,EAAAA,EAAeA,CAAAA,CAACD,MAAOhI,EAAKgI,KAAK,EAC1C,EACF,WACD,eAGC,WAGR,WAACnM,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUE,IAAK,CAAC,YACrC,UAAC+F,EAAAA,EAASA,CAAAA,UAAC,cACX,UAACtF,MAAAA,UACEsD,EACC,UAAC2I,EAAAA,CAASA,CAAAA,CAACvB,UAAW,CAACwB,KAAM5I,EAAKoH,SAAS,EAAGC,WAAY,CAACC,cAAc,CAAI,IAE7E,SAIN,WAACzL,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,UAAW,SAAUE,IAAK,CAAC,YACrC,UAAC+F,EAAAA,EAASA,CAAAA,UAAC,aACX,UAACtF,MAAAA,UACEsD,OAAAA,EAAAA,KAAAA,EAAAA,EAAM6I,MAAN7I,MAAM6I,EACHC,CAAAA,EAAAA,EAAAA,EAAAA,CAA4BA,CAAqB,IAApB9I,EAAK6I,YAAY,CAA2B,IAAjB7I,EAAKoH,SAAS,EACtE,aAMhB,CAEA,SAASU,EAAgB,CAA4D,KAA5D,YAACC,CAAU,CAAiD,CAA5D,EACvB,MACE,WAACgB,EAAAA,CAAKA,CAAAA,WACJ,UAACC,QAAAA,UACC,WAACC,KAAAA,WACC,UAACC,KAAAA,UAAG,yBACJ,UAACA,KAAAA,UAAG,mBAGR,UAACC,QAAAA,UACEpB,EAAWqB,OAAO,CAAC,QAClBC,gBAAAA,EAAAA,EAAU7H,aAAAA,EAAV6H,KAAAA,EAAAA,EAAyBnN,GAAzBmN,CAA6B,GAC3B,WAACJ,KAAAA,WACC,UAACK,KAAAA,UACC,UAACC,EAAAA,CAAcA,CAAAA,CAACC,KAAMH,EAAUI,iBAAiB,KAEnD,UAACH,KAAAA,UACC,UAACC,EAAAA,CAAcA,CAAAA,CAACC,KAAMnG,QALjBA,UAarB,CAEA,IAAM+C,EAA0BvL,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAyB/B8D,EAAAA,CAAqBA,CACrBD,EAAAA,EAAqBA,ucCtTlB,IAAMiJ,EAAU,OAAC,QAACD,CAAM,CAAqB,GAC5ClO,EAASJ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACpB,IAAO,EACLsO,SACF,EACA,CAACA,EAAO,EAGV,MACE,UAAC7L,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,CAAC8H,OAAQ,CAAC,WACtB,UAACC,EAAAA,CAAwBA,CAAAA,CAACnQ,OAAQA,EAAQoQ,wBAAwB,OAGxE,EAAE,EAE6B,OAAC,cAAChC,CAAY,CAA4B,UACvE,GAAsBA,EAAa7N,MAAM,CAIvC,CAJyC,EAIzC,CAJmB,CAInB,MAACiE,EAAAA,CAAKA,CAAAA,CAACjC,UAAU,SAASkC,QAAS,aACjC,WAACpC,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,GAAIG,OAAQ,CAAC8H,KAAM,SAAUrP,MAAOC,EAAAA,EAAkB,EAAE,YACpE,WAACqP,EAAAA,EAAIA,CAAAA,WAAC,gBAEJ,UAACC,EAAAA,CAAOA,CAAAA,CAACtN,QAAQ,2DACf,UAACsI,EAAAA,EAAIA,CAAAA,CAACnI,KAAK,OAAOpC,MAAOC,EAAAA,EAAgB,UAG7C,UAACkN,EAAAA,CAAQD,OAAQE,OAEnB,WAAC/L,EAAAA,CAAGA,CAAAA,CAAC+F,QAAS,GAAIoI,OAAQ,CAACN,OAAQ,CAAC,YAClC,WAACI,EAAAA,EAAIA,CAAAA,WAAC,iBAEJ,UAACC,EAAAA,CAAOA,CAAAA,CAACtN,QAAQ,2DACf,UAACsI,EAAAA,EAAIA,CAAAA,CAACnI,KAAK,OAAOpC,MAAOC,EAAAA,EAAgB,UAG7C,UAAC0N,EAAAA,CAAaA,CAAAA,CACZjG,KAAK,UACLO,MAAM,qBACNC,YAAY,yDAvBX,IA4BX,EAAE,EAE+B7H,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAahC8D,EAAAA,CAAqBA,EACvB","sources":["webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instigation/TickMaterializationsTable.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx"],"sourcesContent":["import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\nimport {PezItem} from '../ui/PezItem';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n  forceCount?: number;\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs, forceCount} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n\n  let items: (RunTimeFragment | null)[] = [...runs];\n  if (forceCount) {\n    if (forceCount > items.length) {\n      items.unshift(...Array(forceCount - items.length).fill(null));\n    } else {\n      items = items.slice(0, forceCount);\n    }\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {items.map((run, ii) => {\n        const opacity = fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0;\n        if (!run) {\n          return (\n            <PezItem key={`empty-${ii}`} color={Colors.backgroundLighter()} opacity={opacity} />\n          );\n        }\n\n        return (\n          <Popover\n            key={run.id}\n            position=\"top\"\n            interactionKind=\"hover\"\n            content={\n              <div>\n                <RunStatusOverlay run={run} name={jobName} />\n              </div>\n            }\n            hoverOpenDelay={100}\n          >\n            <PezItem key={run.id} color={RUN_STATUS_COLORS[run.status]} opacity={opacity} />\n          </Popover>\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 240px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {Colors, Group, Mono} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {gql} from '../apollo-client';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.textLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.textLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    requestedAssetMaterializationCount\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {\n  Box,\n  ButtonLink,\n  Caption,\n  Colors,\n  HeaderCell,\n  Icon,\n  Inner,\n  Row,\n  RowCell,\n  Spinner,\n  Subtitle2,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/TickMaterializationsTable.types';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLink} from '../assets/AssetLink';\nimport {AssetKeysDialogEmptyState} from '../assets/AutoMaterializePolicyPage/AssetKeysDialog';\nimport {EvaluationDetailDialog} from '../assets/AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {globalAssetGraphPathForGroup} from '../assets/globalAssetGraphPathToString';\nimport {AssetKeyInput} from '../graphql/types';\nimport {Container, HeaderRow} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const TickMaterializationsTable = ({\n  tick,\n}: {\n  tick: Pick<\n    AssetDaemonTickFragment,\n    'requestedAssetKeys' | 'requestedMaterializationsForAssets' | 'autoMaterializeAssetEvaluationId'\n  > | null;\n}) => {\n  const [queryString, setQueryString] = useState('');\n\n  const filteredAssetKeys = useMemo(\n    () =>\n      tick\n        ? tick.requestedAssetKeys.filter((assetKey) =>\n            assetKey.path.join('/').includes(queryString),\n          )\n        : [],\n    [tick, queryString],\n  );\n\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const rowVirtualizer = useVirtualizer({\n    count: filteredAssetKeys.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 34,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const assetKeyToPartitionsMap = useMemo(() => {\n    const map: Record<string, string[]> = {};\n    tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n      map[tokenForAssetKey(assetKey)] = partitionKeys;\n    });\n    return map;\n  }, [tick?.requestedMaterializationsForAssets]);\n\n  const content = () => {\n    if (queryString && !filteredAssetKeys.length) {\n      return (\n        <AssetKeysDialogEmptyState\n          title=\"No matching asset keys\"\n          description={\n            <>\n              No matching asset keys for <strong>{queryString}</strong>\n            </>\n          }\n        />\n      );\n    }\n    if (!tick?.requestedAssetKeys.length) {\n      return (\n        <Box padding={{vertical: 12, horizontal: 24}}>\n          <Caption color={Colors.textLight()}>None</Caption>\n        </Box>\n      );\n    }\n    return (\n      <Container ref={parentRef}>\n        <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n          <HeaderCell>Asset</HeaderCell>\n          <HeaderCell>Group</HeaderCell>\n          <HeaderCell>Result</HeaderCell>\n        </HeaderRow>\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const assetKey = filteredAssetKeys[index]!;\n            return (\n              <AssetDetailRow\n                key={key}\n                $height={size}\n                $start={start}\n                assetKey={assetKey}\n                partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                evaluationId={tick.autoMaterializeAssetEvaluationId!}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    );\n  };\n\n  return (\n    <Box style={{height: '500px'}} flex={{direction: 'column'}}>\n      <Box\n        padding={{vertical: 12, horizontal: 24}}\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        border=\"bottom\"\n      >\n        <Subtitle2>Requested materializations</Subtitle2>\n        <TextInput\n          icon=\"search\"\n          value={queryString}\n          onChange={(e) => setQueryString(e.target.value)}\n          placeholder=\"Filter by asset key…\"\n          style={{width: '252px'}}\n        />\n      </Box>\n      {content()}\n    </Box>\n  );\n};\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: string;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const numMaterializations = partitionKeys?.length || 1;\n  const queryResult = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const {data} = queryResult;\n\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link to={globalAssetGraphPathForGroup(definition.groupName, assetKey)}>\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.textLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.textLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          {definition ? (\n            <>\n              <ButtonLink onClick={() => setIsOpen(true)}>\n                {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'}{' '}\n                requested\n              </ButtonLink>\n              <EvaluationDetailDialog\n                isOpen={isOpen}\n                onClose={() => setIsOpen(false)}\n                evaluationID={evaluationId}\n                assetKeyPath={assetKey.path}\n              />\n            </>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import 'chartjs-adapter-date-fns';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  MiddleTruncate,\n  NonIdealState,\n  SpinnerWithText,\n  Subtitle2,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {RunList, TargetedRunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {TickMaterializationsTable} from './TickMaterializationsTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickResultType} from '../ticks/TickStatusTag';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({\n  tickId,\n  tickResultType,\n  isOpen,\n  instigationSelector,\n  onClose,\n}: DialogProps) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '80vw', maxWidth: '1200px', minWidth: '600px'}}\n    >\n      <TickDetailsDialogImpl\n        tickId={tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n      />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Close</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: string | undefined;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, tickResultType, instigationSelector}: InnerProps) => {\n  const {data, loading} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(\n    JOB_SELECTED_TICK_QUERY,\n    {\n      variables: {instigationSelector, tickId: tickId || ''},\n      skip: !tickId,\n    },\n  );\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitionRequests, deletedPartitionRequests] = useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (loading) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading tick details…\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (!tick) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"Tick details not found\"\n            description=\"Details for this tick could not be found.\"\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <>\n            <span>Tick for {instigationSelector.name}: </span>\n            <TimestampDisplay\n              timestamp={tick.timestamp}\n              timeFormat={{showTimezone: false, showSeconds: true}}\n            />\n          </>\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} tickResultType={tickResultType} />\n      </Box>\n      {tickResultType === 'materializations' ? <TickMaterializationsTable tick={tick} /> : null}\n      {tickResultType === 'runs' ? (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n          {tick.runIds.length ? (\n            <>\n              <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Requested runs</Subtitle2>\n              </Box>\n              <RunList runIds={tick.runIds} />\n            </>\n          ) : tick.originRunIds.length ? (\n            <TargetedRunList originRunIds={tick.originRunIds} />\n          ) : null}\n          {addedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Added partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={addedPartitionRequests} />\n            </>\n          ) : null}\n          {deletedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Deleted partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={deletedPartitionRequests} />\n            </>\n          ) : null}\n          {tick.error ? (\n            <Box padding={24}>\n              <PythonErrorInfo error={tick.error} />\n            </Box>\n          ) : null}\n          {tick.skipReason ? (\n            <Box padding={24}>\n              <strong>Skip reason:</strong> {tick.skipReason}\n            </Box>\n          ) : null}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({\n  tick,\n  tickResultType,\n}: {\n  tick: HistoryTickFragment | AssetDaemonTickFragment;\n  tickResultType: TickResultType;\n}) {\n  const intent = useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(tickResultType === 'materializations' || !('runIds' in tick)\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap((partition) =>\n          partition.partitionKeys?.map((key) => (\n            <tr key={key}>\n              <td>\n                <MiddleTruncate text={partition.partitionsDefName} />\n              </td>\n              <td>\n                <MiddleTruncate text={key} />\n              </td>\n            </tr>\n          )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n\n          requestedAssetKeys {\n            path\n          }\n          requestedAssetMaterializationCount\n          autoMaterializeAssetEvaluationId\n          requestedMaterializationsForAssets {\n            assetKey {\n              path\n            }\n            partitionKeys\n          }\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {Body, Box, Colors, Group, Icon, NonIdealState, Tooltip} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunsFeedTableWithFilters} from '../runs/RunsFeedTable';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const filter = useMemo(\n    () => ({\n      runIds,\n    }),\n    [runIds],\n  );\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunsFeedTableWithFilters filter={filter} includeRunsFromBackfills />\n    </Box>\n  );\n};\n\nexport const TargetedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: Colors.textLighter()}}>\n        <Body>\n          Targeted Runs\n          <Tooltip content=\"Runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n"],"names":["StepSummaryForRun","props","runId","data","useQuery","queryResult","STEP_SUMMARY_FOR_RUN_QUERY","variables","run","pipelineRunOrError","status","__typename","relevantSteps","useMemo","failedStatuses","has","stepStats","filter","step","StepEventStatus","FAILURE","inProgressStatuses","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","color","Colors","Link","to","stepKey","gql","RunStatusPezList","fade","jobName","runs","forceCount","count","max","MIN_OPACITY_STEPS","MIN_OPACITY","items","countForStep","unshift","Array","fill","slice","Box","flex","direction","alignItems","gap","map","ii","opacity","MAX_OPACITY","Popover","position","interactionKind","content","div","RunStatusOverlay","name","hoverOpenDelay","PezItem","RUN_STATUS_COLORS","id","OverlayContainer","OverlayTitle","RunRow","RunStatusIndicator","CaptionMono","titleForRun","RunTime","RunStateSummary","SummaryContainer","styled","FontFamily","default","$color","$opacity","RunStatusLink","Group","spacing","target","rel","Mono","INSTIGATION_STATE_FRAGMENT","RUN_STATUS_FRAGMENT","RUN_TIME_FRAGMENT","TICK_TAG_FRAGMENT","table","HISTORY_TICK_FRAGMENT","PYTHON_ERROR_FRAGMENT","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","LastRunSummary","memo","showHover","showButton","showSummary","intent","RunStatus","SUCCESS","CANCELED","CANCELING","justifyContent","tag","tagElement","Tag","size","undefined","AnchorButton","TEMPLATE_COLUMNS","TickMaterializationsTable","tick","queryString","setQueryString","useState","filteredAssetKeys","requestedAssetKeys","assetKey","path","join","includes","parentRef","useRef","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","partitionKeys","tokenForAssetKey","style","height","padding","vertical","horizontal","border","Subtitle2","TextInput","icon","value","onChange","e","placeholder","width","AssetKeysDialogEmptyState","title","description","strong","Container","ref","HeaderRow","templateColumns","sticky","HeaderCell","Inner","$totalHeight","index","key","start","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","isOpen","setIsOpen","numMaterializations","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","definition","repoAddress","buildRepoAddress","repository","location","Row","RowGrid","RowCell","AssetLink","textStyle","groupName","globalAssetGraphPathForGroup","Icon","Spinner","purpose","ButtonLink","onClick","EvaluationDetailDialog","onClose","evaluationID","assetKeyPath","TickDetailsDialog","tickId","tickResultType","instigationSelector","Dialog","maxWidth","minWidth","TickDetailsDialogImpl","DialogFooter","topBorder","Button","loading","JOB_SELECTED_TICK_QUERY","skip","instigationStateOrError","addedPartitionRequests","deletedPartitionRequests","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","DialogHeader","label","SpinnerWithText","span","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","TickDetailSummary","overflowY","runIds","RunList","originRunIds","TargetedRunList","PartitionsTable","partitions","error","PythonErrorInfo","skipReason","NonIdealState","InstigationTickStatus","STARTED","display","gridTemplateColumns","requestedAssetMaterializationCount","showCustomAlert","body","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","td","MiddleTruncate","text","partitionsDefName","bottom","RunsFeedTableWithFilters","includeRunsFromBackfills","side","Body","Tooltip","margin"],"sourceRoot":"","ignoreList":[]}