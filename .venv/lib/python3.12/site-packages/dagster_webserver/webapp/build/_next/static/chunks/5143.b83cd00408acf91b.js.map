{"version":3,"file":"static/chunks/5143.b83cd00408acf91b.js","mappings":"ywBAkBO,IAAMA,EAAgB,OAAC,QAC5BC,CAAM,WACNC,CAAS,qBACTC,CAAmB,QACnBC,CAAM,SACNC,CAAO,CAOR,GACC,MACE,WAACC,EAAAA,EAAMA,CAAAA,CACLF,OAAQA,EACRC,QAASA,EACTE,MAAO,CAACC,MAAO,OAAQC,SAAU,SAAUC,SAAU,OAAO,EAC5DC,MACE,UAACC,OAAAA,UACEV,EACC,WAACU,OAAAA,WACC,WAACA,OAAAA,WAAK,YAAUT,EAAoBU,IAAI,CAAC,QACzC,UAACC,EAAAA,CAAgBA,CAAAA,CAACZ,UAAWA,EAAWa,WAAY,CAACC,aAAa,CAAI,OAGxE,WAACJ,OAAAA,WAAK,YAAUT,EAAoBU,IAAI,gBAK7CZ,EACC,UAACgB,EAAAA,CAAsBd,oBAAqBA,EAAqBF,OAAQA,IACvE,KAEJ,UAACiB,EAAAA,CAAGA,CAAAA,CAACC,WAAYC,EAAAA,EAAwB,GAAIb,MAAO,CAACc,OAAQ,EAAGC,SAAU,UAAU,WAClF,UAACC,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAACC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,eAKpC,EAAE,EAOmC,OAAC,qBAACF,CAAmB,CAAEF,QAAM,CAAoB,GAC9E,MAAC0B,CAAI,SAAEC,CAAO,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC9BC,EACA,CACEC,UAAW,qBAAC5B,SAAqBF,CAAM,EACvC+B,4BAA6B,EAC/B,GAGIC,EACJN,OAAAA,EAAAA,KAAAA,EAAAA,EAAMO,MAANP,iBAA6B,CAACQ,UAAAA,IAAe,2BAC7CR,EAAAA,KAAAA,EAAAA,EAAMO,MAANP,iBAA6B,CAACS,IAAI,EAC9BT,QAAAA,KAAAA,EAAAA,EAAAA,uBAA6B,CAACS,IAAI,CAACC,SAAS,CAACJ,MAAM,MACnDK,EAEN,GAAIV,EACF,MACE,CAFS,EAET,OAACV,EAAAA,CAAGA,CAAAA,CAACX,MAAO,CAACgC,OAAQ,GAAG,EAAGC,KAAM,CAACC,eAAgB,SAAUC,WAAY,QAAQ,WAC9E,UAACC,EAAAA,CAAeA,CAAAA,CAACC,MAAM,oBAK7B,GAAIX,GAAUA,EAAOY,MAAM,CACzB,CAD2B,KAEzB,UAAC3B,EAAAA,CAAGA,CAAAA,CAACX,MAAO,CAACgC,OAAQ,GAAG,EAAGC,KAAM,CAACM,UAAW,QAAQ,WACnD,UAACC,EAAAA,CAAwBA,CAAAA,CAACd,OAAQA,MAKxC,IAAMe,EACJrB,SAAAA,KAAAA,EAAAA,CAAAA,CAAMO,uBAAuB,CAACC,UAAAA,IAAe,yBACzCR,EAAAA,KAAAA,EAAAA,EAAMO,MAANP,iBAA6B,CAACS,IAAI,CAACa,MAAM,MACzCX,EACAY,EACJvB,OAAAA,EAAAA,KAAAA,EAAAA,EAAMO,MAANP,iBAA6B,CAACQ,UAAU,IAAK,yBACzCR,EAAAA,KAAAA,EAAAA,EAAMO,MAANP,iBAA6B,CAACuB,eAAe,MAC7CZ,EACAa,EACgB,WAApBD,EACI,2FACAA,eACE,oGACAZ,EAER,MACE,UAACpB,EAAAA,CAAGA,CAAAA,CACFX,MAAO,CAACgC,OAAQ,GAAG,EACnBC,KAAM,CAACC,eAAgB,SAAUC,WAAY,QAAQ,EACrDU,QAAS,CAACC,SAAU,EAAE,WAEtB,UAACC,EAAAA,CAAaA,CAAAA,CACZC,KAAK,aACL5C,MAAM,qBACN6C,YACE,WAACtC,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,EAAE,YACtC,UAACC,MAAAA,UAAI,uIAIW,YAAfV,GACC,iCACE,UAACU,MAAAA,UAAI,2HAIL,UAACA,MAAAA,UAAI,6EAKbC,OACER,GACE,UAACS,EAAAA,EAAoBA,CAAAA,CACnBC,KAAMV,EACNW,UAAW,UAACC,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,yBACvB,0BAQb,EAAE,EAE4BmD,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAmB7BC,EAAAA,CAA8BA,2dCzK3B,IAAMC,EAAkCF,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAa9CG,EAAAA,CAAmCA,CACnCC,EAAAA,CAAqBA,EACvB,kCCjBK,IAAMC,EAAOC,SAAAA,EAAMA,CAACZ,GAAG,2GAK5B,mLC0BK,IAAMa,EAAgB,OAAC,MAC5BnC,CAAI,gBACJoC,CAAc,gBACdC,CAAc,CAC0B,GAClC,CAACC,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvCC,EAAMC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAClB,IAAMC,EAAmC,qBAAnBP,EAAwC,kBAAoB,MAClF,OAAQpC,EAAKa,MAAM,EACjB,KAAK+B,EAAAA,GAAqBA,CAACC,OAAO,CAChC,MACE,UAACC,EAAAA,CAAGA,CAAAA,CAACC,OAAO,UAAU5B,KAAMkB,EAAiBnC,OAAY,mBACtDmC,EAAiB,cAAgB,cAGxC,MAAKO,EAAAA,GAAqBA,CAACI,OAAO,CAChC,IAAMP,EACJ,UAACQ,EAAAA,CAAOA,CAAAA,CACNC,UAAWlE,EAAAA,EAAwB,GACnCwB,MACqB,qBAAnB4B,EACI,+BACA,qBAIV,GAAI,YAAapC,GAAQA,EAAKmD,OAAO,CAAC1C,MAAM,CAAE,CAC5C,IAAM2C,EAAU,GAAuB,OAApBpD,EAAKmD,OAAO,CAAC1C,MAAM,CAAC,uFACvC,MACE,UAAC4C,EAAAA,CAAOA,CAAAA,CAACnE,SAAS,QAAQoE,QAASF,WAChCX,GAGP,CACA,GAAI,eAAgBzC,GAAQA,EAAKuD,UAAU,CACzC,CAD2C,KAEzC,UAACF,EAAAA,CAAOA,CAAAA,CAACnE,SAAS,QAAQoE,QAAStD,EAAKuD,UAAU,CAAEC,cAAc,eAC/Df,IAIP,OAAOA,CACT,MAAKG,EAAAA,GAAqBA,CAACa,OAAO,CAChC,MACE,WAAC3E,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUe,IAAK,CAAC,YACxD,UAACyB,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBAAS,YACpB/C,EAAK0D,KAAK,CACT,UAACC,EAAAA,CAAUA,CAAAA,CACTrE,QAAS,KACPiD,GAAc,EAChB,WACD,SAGC,OAGV,MAAKK,EAAAA,GAAqBA,CAACgB,OAAO,CAChC,IAAMC,EACe,qBAAnBzB,EACIpC,EAAK8D,kCAAkC,CACvC9D,EAAK+D,MAAM,CAACtD,MAAM,CAClBuD,EACJ,WAAClB,EAAAA,CAAGA,CAAAA,CAACC,OAAO,oBACTc,EAAM,IAAElB,EACRsB,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACJ,EAAO,GAAI,KAAK,gBAG9B,GAAI,YAAa7D,GAAQA,EAAKmD,OAAO,CAAC1C,MAAM,CAAGT,EAAK+D,MAAM,CAACtD,MAAM,CAAE,CACjE,IAAM2C,EAAU,GACdpD,MAAAA,CADiBA,EAAKmD,OAAO,CAAC1C,MAAM,CAAC,yBAEtC,OADCT,EAAKmD,OAAO,CAAC1C,MAAM,CAAGT,EAAK+D,MAAM,CAACtD,MAAM,CACzC,qEACD,MACE,UAAC4C,EAAAA,CAAOA,CAAAA,CAACnE,SAAS,QAAQoE,QAASF,WAChCY,GAGP,CACA,OAAOA,CACX,CACF,EAAG,CAAC3B,EAAgBrC,EAAMoC,EAAe,EAEzC,MACE,iCACGK,EACAzC,EAAK0D,KAAK,CACT,WAACxF,EAAAA,EAAMA,CAAAA,CAACF,OAAQsE,EAAY/D,MAAM,QAAQJ,MAAO,CAACC,MAAO,MAAM,YAC7D,UAAC8F,EAAAA,EAAUA,CAAAA,UACT,UAACC,EAAAA,EAAeA,CAAAA,CAACT,MAAO1D,EAAK0D,KAAK,KAEpC,UAACvE,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAACC,EAAAA,EAAMA,CAAAA,CACL0D,OAAO,UACPzD,QAAS,KACPiD,GAAc,EAChB,WACD,eAKH,OAGV,EAAE,0tBCtIK,IAAMR,EAAsCH,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAmClDI,EAAAA,CAAqBA,EACvB,iNCzBF,IAAMoC,EAAY,CAChB,CAACxB,EAAAA,GAAqBA,CAACgB,OAAO,CAAC,CAAE5E,EAAAA,EAAkB,GACnD,CAAC4D,EAAAA,GAAqBA,CAACa,OAAO,CAAC,CAAEzE,EAAAA,EAAgB,GACjD,CAAC4D,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAE7D,EAAAA,EAAqB,GACtD,CAAC4D,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEhE,EAAAA,EAAyB,EAC5D,EAEMqF,EAAgB,CACpB,CAACzB,EAAAA,GAAqBA,CAACgB,OAAO,CAAC,CAAE5E,EAAAA,EAAuB,GACxD,CAAC4D,EAAAA,GAAqBA,CAACa,OAAO,CAAC,CAAEzE,EAAAA,EAAqB,GACtD,CAAC4D,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAE7D,EAAAA,EAA0B,GAC3D,CAAC4D,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEhE,EAAAA,EAAsB,EACzD,EAQasF,EAAmB,QA4QlBxG,EAAmByG,KA5QyD,EA4Q3D,KA3Q7BC,CAAK,EA2QiDC,IAAY,EAAEC,QA1QpEtC,CAAc,aACduC,CAAW,cACXC,CAAY,YACZC,CAAU,WACVH,EAAYI,GAAU,CACtBC,KADqB,MACVD,GAAM,WACjBE,EAVa,GAUK,CAUnB,GACO,CAACC,EAAKC,EAAO,CAAG1C,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAS2C,KAAKF,GAAG,IACzC,CAACG,EAAUC,EAAU,CAAG7C,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAU,GAEhD8C,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,GAAI,CAACF,GAAY,CAACP,EAAY,CAC5B,IAAMU,EAAWC,YAAY,KAC3BN,EAAOC,KAAKF,GAAG,GACjB,EAhCmB,CAgChBQ,IACH,MAAO,IAAMC,cAAcH,EAC7B,CACA,MAAO,KAAO,CAChB,EAAG,CAACV,EAAYO,EAAS,EAEzB,IAAMO,EAAOd,OAAAA,EAAAA,KAAAA,EAAAA,CAAY,CAAC,EAAE,EAAmB,IAAhBA,CAAU,CAAC,EAA7BA,CAAyCI,EAAMD,EACtDP,EAAOI,OAAAA,EAAAA,KAAAA,EAAAA,CAAY,CAAC,EAAE,EAAmB,IAAhBA,CAAU,CAAC,EAA7BA,CAAyCI,EAAMP,EACtDkB,EAAcnB,EAAOQ,GAAOA,EAAMU,EAElCE,EAAYF,EAAOlB,EAEnB,UAACqB,CAAQ,gBAAEC,CAAc,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAExCC,EAAgBvD,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAErB8B,EAAM0B,MAAM,CAAC,GAAU,CAAClG,EAAKmG,YAAY,EAAwB,IAApBnG,EAAKmG,YAAY,CAAU1B,GAAM2B,OAAO,GAC3F,CAAC5B,EAAOC,EAAK,EAEV4B,EAAiB3D,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACtBuD,EAAcK,GAAG,CAAC,CAACtG,EAAMuG,iBAE9B,IAAMC,KAAc,IAALC,EAAiB3I,SAAS,GAAGgI,EAAS1H,KAAK,MAAEqG,CA6N3BA,EA7NiCoB,GAM5Da,KALeC,CAAAA,CAKRF,CALQE,EAAAA,EAAAA,CAAkBA,CAAC3G,EAAMiG,EAAcxF,MAAM,CAAG8F,EAAI,GACrEvG,EAAKlC,SAAS,CACdkC,EAAKmG,YAAY,CACK,IAApBnG,EAAKmG,YAAY,CACjBlB,IAC0Ba,EAAS1H,KAAK,CAuN3C,EAAkBN,GAvN2B2G,CAuNfA,CAAG,CAvNkBoB,GACtD,GAsNiCpB,EAAZ3G,CAtNd,mBACFkC,GAAAA,CACH5B,MAAOwI,KAAKC,GAAG,CAACH,EAAOF,EA7Db,GAAG,GA6DkBM,IAC/BN,GAEJ,GAEC,CAAC/B,EAAMQ,EAAKgB,EAAeJ,EAAWC,EAAS1H,KAAK,CAAC,EAGlD2I,EADoBH,KAAKC,GAAG,CAAC,CAAClB,EAAOlB,CAAAA,CAAG,CAAK,GAAIM,GACb,EACpCiC,EAAiBJ,KAAKK,IAAI,CAACxC,EAAOsC,GAAiBA,EACnDG,EAAWN,KAAKK,IAAI,CAAC,CAACtB,EAAOqB,CAAAA,CAAa,CAAKD,GAC/CI,EAAYP,KAAKK,IAAI,CAACC,EAAW,GAEjCE,EAAY1E,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACxB,IAAM8B,EAAQ,EAAE,CAChB,IAAK,IAAI6C,EAAK,EAAGA,EAAKH,EAAUG,IAAM,SACpC,IAAMC,EAAON,EAAiBK,EAAKN,EACnCvC,EAAM+C,IAAI,CAAC,CACTD,OACAE,CAAAA,EAAGf,EAAKa,IAAMxB,EAAS1H,KAAK,MAAEqG,CAiMCA,EAjMKoB,GACpC4B,UAAWJ,EAAKF,GAAc,CAChC,EACF,CACA,OAAO3C,CACT,EAAG,CAAC0C,EAAUF,EAAgBD,EAAejB,EAAS1H,KAAK,CAAEqG,EAAMoB,EAAWsB,EAAU,EAExF,MACE,UAAC7F,MAAAA,CAAInD,MAAO,CAACuJ,YAAa,KAAK,WAC7B,WAACpG,MAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAQyE,GAAAA,WACP,WAAC4B,EAAAA,WACEP,EAAUd,GAAG,CAAC,GACb,WAACsB,EAAAA,CAECzJ,MAAO,CACL0J,UAAW,cAAqB,OAAP7H,EAAKwH,CAAC,CAAC,MAClC,YAEA,UAACM,EAAAA,CAAAA,GACA9H,EAAKyH,SAAS,CACb,UAACM,EAAAA,UACC,UAACC,EAAAA,EAAOA,CAAAA,UACN,UAACC,EAAAA,CAASA,CAAAA,CAACnK,UAAW,CAACoK,GAAIlI,EAAKsH,IAAI,EAAG3I,WAAY,CAACC,aAAa,CAAI,QAGvE,OAZCoB,EAAKsH,IAAI,GAejBjB,EAAeC,GAAG,CAAC,QAIZtG,EAFHoC,EADH,IAAMyB,EACJ,OAACzB,EAAAA,sBAAyC,CAAE,YAAYpC,EACb,EADgB,IAEvDA,GAAAA,EAAK+D,MAAAA,EAAL/D,KAAAA,EAAAA,EAAaS,GAAbT,GAAmB,CADnBA,EAAK8D,WADR1B,uBAC0C,EAD1CA,EAE2B,EAC9B,MACE,UAAC+F,EAAAA,CAEChK,MAAO,CACL0J,UAAW,cAA0B,OAAZ7H,EAAKwG,MAAM,CAAC,OACrCpI,MAAO,GAAc,OAAX4B,EAAK5B,KAAK,CAAC,KACvB,EACAyC,OAAQb,EAAKa,MAAM,CACnBuH,aAAc,KACZzD,EAAY3E,GACZqF,GAAU,EACZ,EACAgD,aAAc,KACZ1D,IACAU,GAAU,EACZ,EACA/F,QAAS,KACPsF,EAAa5E,EACf,WAEA,UAACqD,EAAAA,CAAOA,CAAAA,CAACC,QAAS,UAACgF,EAAAA,CAAYtI,KAAMA,EAAMoC,eAAgBA,aACzD,UAACd,MAAAA,CAAInD,MAAO,CAACC,MAAO4B,EAAK5B,KAAK,CAAG,KAAM+B,OAAQ,MAAM,WAClD0D,EAAQ,EAAIA,EAAQ,UApBpB7D,EAAKuI,EAAE,CAyBlB,GACC3C,EACC,UAAC4C,EAAAA,CACCrK,MAAO,CACL0J,UAAW,cAAyD,OAA3CpB,GAAKxB,IAAKa,EAAS1H,KAAK,MAAEqG,CAiI5BA,EAjIkCoB,GAAW,MACtE,IAEA,QAEN,UAAC4C,EAAAA,CAAAA,QAIT,EAAE,EAEkBC,CAAAA,EAAAA,EAAAA,IAAAA,CAAIA,CACtB,OAAC,CACC1I,MAAI,gBACJoC,CAAc,CAIf,GACOvB,EAAS6B,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,SAcT1C,EAAsCA,SAblD,EAASa,MAAM,GAAK+B,EAAAA,GAAqBA,CAACa,OAAO,CACxC,CAD0C,mBAG/CzD,EAAKa,MAAM,GAAK+B,EAAAA,GAAqBA,CAACC,OAAO,CACxC,CAD0C,aAG5B,qBAAnBT,CAAyC,CAAE,UAAUpC,EAOhD,EAPmD,CAOnBiE,EAPuB,IAOvBA,CAA7BjE,CAAAA,OAAAA,EAAAA,EAAK2I,IAAAA,EAAL3I,KAAAA,EAAAA,EAAWS,GAAXT,GAAWS,GAAU,EAAE,QAA2C,OAArCwD,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAAAA,OAACjE,EAAAA,EAAK2I,IAAAA,EAAL3I,KAAAA,EAAAA,EAAWS,GAAXT,GAAiB,CAAE,GAAI,KAAK,cANrE,GAA6DiE,MAAAA,CAA1DjE,EAAK8D,kCAAkC,CAAC,oBAIhD,OAJkEG,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAC1EjE,EAAK8D,kCAAkC,CACvC,GACA,KACA,aAIN,EAAG,CAAC9D,EAAMoC,EAAe,EAGnBwG,EAAYC,IAAM,IAAO7I,EAAKlC,SAAS,EACvCgL,EAAUD,IAAM7I,EAAKmG,YAAY,CAAG,EADnB0C,EAC0B7I,EAAKmG,YAAY,CAAGhB,KAAKF,CAArD4D,EAAwD,IACvEE,EAAcH,EAAUI,EAAE,CAACF,GAAS,GAE1C,MACE,WAACxH,MAAAA,WACC,UAAC0G,EAAAA,EAAOA,CAAAA,CAACiB,GAAG,eACV,UAAChB,EAAAA,CAASA,CAAAA,CAACnK,UAAW,CAACoL,KAAMlJ,EAAKlC,SAAS,EAAGa,WAAY,CAACC,aAAa,CAAI,MAE9E,WAACoJ,EAAAA,EAAOA,CAAAA,CAACiB,GAAG,gBACTpI,EAAO,KAAGkI,EAAY,OAExB/I,EAAKa,MAAM,GAAK+B,EAAAA,GAAqBA,CAACC,OAAO,CAAG,KAC/C,UAACmF,EAAAA,EAAOA,CAAAA,CAACmB,MAAOnK,EAAAA,EAAgB,YAAI,wBAI5C,GAGI2I,EAAezF,EAAAA,EAAMA,CAACZ,GAAG,4HAIFtC,EAAAA,EAAqB,IAG5CyJ,EAAkBvG,EAAAA,EAAMA,CAACZ,GAAG,6DAI5B6G,EAAOjG,EAAAA,EAAMA,CAACZ,GAAG,wMAWZtC,EAAAA,EAAwB,GAC/B,OAAC,QAAC6B,CAAM,CAAC,SAAK,qBAGEwD,MAAAA,CAFFD,CAAS,CAACvD,EAAO,CAAC,wCAEM,OAAtBwD,CAAa,CAACxD,EAAO,CAAC,kBAKpC+G,EAAW1F,EAAAA,EAAMA,CAACZ,GAAG,4GAMrBwG,EAAe5F,EAAAA,EAAMA,CAACZ,GAAG,8GAKftC,EAAAA,EAAqB,IAE/B+I,EAAe7F,EAAAA,EAAMA,CAACZ,GAAG,sHAQzBkH,EAAetG,EAAAA,EAAMA,CAACZ,GAAG,+NAKftC,EAAAA,EAAoB,GAKlBA,EAAAA,EAAoB,GACzBA,EAAAA,EAAqB,0XCrS3B,IAAMoK,EAAuBxH,CAAAA,EAAAA,SAAAA,EAAAA,CAAGA,CAAAA,mBAmBrC,kPCkBK,IAAMyH,EAAuB,OAAC,gBACnCC,CAAc,gBACdC,CAAc,SACdC,CAAO,aACPC,CAAW,CAMZ,GACOC,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,CAACF,GAC3B,GAAI,CAACD,GAAW,CAACF,EACf,MAAO,UAAC9K,OAAAA,CAAAA,GAGV,IAAMoL,QAAiBJ,EAAAA,KAAAA,EAAAA,EAAStD,MAAM,CAAC,EAAhBsD,CAA4B,CAACK,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACC,EAAOC,YAAY,UAE7F,EACS,UAACC,EAAAA,CAAkBV,CADR,cACwBA,EAAgBC,eAAgBA,IAGxEK,SAAAA,KAAAA,EAAAA,EAAgBnJ,MAAM,EAAE,CAAxBmJ,EAEA,OAAC9K,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,WACjCuI,EAAetD,GAAG,CAAC,GAClBwD,EAAOC,YAAY,CACjB,UAACjH,EAAAA,CAAGA,CAAAA,CAAC3B,KAAK,MAAM8I,YAAaH,EAAOC,YAAY,UAC9C,UAACG,EAAAA,CAAiBA,CAAAA,CAEhBH,aAAcD,EAAOC,YAAY,CACjCI,oBAAqBV,EACrBW,MAAO,CAAC,CAAEV,IAAQW,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACX,EAAMI,EAAOC,aAAY,GAHtDD,EAAOC,YAAY,GAF2BD,EAAOC,YAAY,EAQxE,QAOV,UAACjH,EAAAA,CAAGA,CAAAA,UACF,UAACxB,MAAAA,CAAInD,MAAO,CAACgL,MAAOnK,EAAAA,EAAgB,EAAE,WAAG,UAG/C,EAAE,EAIwB,OAAC,CACzBsK,gBAAc,gBACdC,CAAc,CAIf,GACO,CAACe,EAAYC,EAAc,CAAG/H,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAEvCkB,EACJ4F,kBAAekB,aAAa,CAACzK,UAAU,CAAqBuJ,EAAekB,aAAa,CAAG,KAEvF,QAACC,CAAM,QAAEC,CAAM,eAAEC,CAAa,kBAAEC,CAAgB,CAAC,CAAGlI,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAChE,GAAgD,eAAe,GAA5C8H,aAAa,CAACzK,UAAU,CACzC,MAAO,CAAC0K,OAAQ,EAAE,CAAEC,OAAQ,EAAE,CAAEC,cAAe,EAAE,CAAEC,iBAAkB,EAAE,EAEzE,IAAMF,EAASpB,EAAekB,aAAa,CAACK,KAAK,CAEjD,MAAO,CACLJ,OAAQnB,EAAewB,WAAW,CAACC,KAAK,GAAGC,IAAI,CAACC,EAAAA,EAAkBA,EAClEP,OAAQA,EAAOpE,GAAG,CAAC,GAAO4E,EAAEC,GAAG,EAAEH,IAAI,CAACI,EAAAA,EAAgBA,EACtDT,cAAeD,EACZxE,MAAM,CAAEmF,QAAYA,QAAF,CAAC,SAACA,EAAAA,EAAMC,UAAAA,EAAND,KAAAA,EAAAA,EAAkBE,GAAlBF,gBAAkBE,IACtCjF,GAAG,CAAC,GAAO4E,EAAEC,GAAG,EAChBH,IAAI,CAACI,EAAAA,EAAgBA,EACxBR,iBAAkBF,EACfxE,MAAM,CAAC,QAAYmF,QAAD,SAACA,EAAAA,EAAMC,UAAAA,EAAND,KAAAA,EAAAA,EAAkBE,GAAlBF,gBAAkBE,IACrCjF,GAAG,CAAE4E,GAAMA,EAAEC,GAAG,EAChBH,IAAI,CAACI,EAAAA,EAAgBA,CAC1B,CACF,EAAG,CAAC9B,EAAe,EAEb,CAACkC,EAAaC,EAAe,CAAGjJ,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,QACzCkJ,EAAajB,EAAOhK,MAAM,EAAI,CAACiK,EAAOjK,MAAM,CAAG,SAAW,SAChE6E,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,IAAMmG,EAAeC,GAAa,CAACA,EAAW,EAExD,IAAMC,EAAuBrC,EAAeqC,oBAAoB,EAAI,GAC9DC,EAvCkB,8BAuCJD,EAEpB,GAAIlB,MAAOhK,MAAM,EAA4B,IAAlBiK,EAFkBmB,MAEL,EAAUnB,CAAM,CAAC,EAAE,CACzD,CAD2D,KAEzD,UAAC5H,EAAAA,CAAGA,CAAAA,CAAC3B,KAAK,iBACR,UAAC2K,EAAAA,EAAIA,CAAAA,CAAC9C,GAAI+C,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAACrB,CAAM,CAAC,EAAE,WAAIsB,CAAAA,EAAAA,EAAAA,EAAAA,CAAsBA,CAACtB,CAAM,CAAC,EAAE,MAKpF,GAAsB,IAAlBA,EAAOjK,MAAM,EAAUgK,MAAOhK,MAAM,EAAUgK,CAAM,CAAC,EAAE,CACzD,CAD2D,KAEzD,UAAC3H,EAAAA,CAAGA,CAAAA,CAAC3B,KAAK,uBACR,UAAC2K,EAAAA,EAAIA,CAAAA,CAAC9C,GAAIiD,CAAAA,EAAAA,EAAAA,CAAAA,CAA6BA,CAACxB,CAAM,CAAC,EAAE,WAAIyB,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAACzB,CAAM,CAAC,EAAE,MAKvF,IAAM0B,EACJ5C,IAAmB6C,EAAAA,GAAUA,CAACC,gBAAgB,EAAI9C,IAAmB6C,EAAAA,GAAUA,CAACE,UAAU,CAE5F,MACE,iCACE,WAACpO,EAAAA,EAAMA,CAAAA,CACLF,OAAQsM,EACR/L,MAAM,kBACNN,QAAS,IAAMsM,GAAc,GAC7BpM,MAAO,CAACC,MAAO,QAASC,SAAU,OAAQC,SAAU,OAAO,EAC3DiO,oBAAoB,IACpBC,iBAAiB,cAEjB,UAAC1N,EAAAA,CAAGA,CAAAA,CACFsB,KAAM,CAACM,UAAW,SAAUW,IAAK,EAAE,EACnCL,QAAS,CAACyL,WAAY,GAAIxL,SAAU,EAAE,EACtCyL,OAAO,kBAEP,WAAC5N,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACrC,UAACsL,EAAAA,EAASA,CAAAA,UAAC,oBACX,UAACC,EAAAA,EAAIA,CAAAA,UAAEjB,SAIX,UAAC7M,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACyL,WAAY,GAAII,IAAK,CAAC,EAAGH,OAAO,kBAC7C,WAACI,EAAAA,EAAIA,CAAAA,CAACC,KAAK,QAAQC,cAAexB,YAC/BW,EACC,UAACc,EAAAA,EAAGA,CAAAA,CACF1E,GAAG,SACHhK,MAAO,sCAA2D,OAArBoM,EAAclK,MAAM,CAAC,KAClEnB,QAAS,IAAMmM,EAAe,YAGhC,UAACwB,EAAAA,EAAGA,CAAAA,CACF1E,GAAG,SACHhK,MAAO,WAAyB,OAAdmM,EAAOjK,MAAM,CAAC,KAChCnB,QAAS,IAAMmM,EAAe,YAGjCU,GACC,UAACc,EAAAA,EAAGA,CAAAA,CACF1E,GAAG,4BACH2E,SAAsC,IAA5BtC,EAAiBnK,MAAM,CACjClC,MAAO,iBAAyC,OAAxBqM,EAAiBnK,MAAM,CAAC,KAChDnB,QAAS,IAAMmM,EAAe,+BAGlC,UAACwB,EAAAA,EAAGA,CAAAA,CACF1E,GAAG,SACH2E,SAA4B,IAAlBzC,EAAOhK,MAAM,CACvBlC,MAAO,UAAwB,OAAdkM,EAAOhK,MAAM,EAC9BnB,QAAS,IAAMmM,EAAe,iBAIpC,UAAC3M,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,QAAQ,EAAGvC,MAAO,CAACgP,UAAW,OAAQC,UAAW,OAAO,WAC5D,WAAhB5B,EACC,UAAC6B,EAAAA,CAA4BA,CAAAA,CAC3BC,MAAO7C,EACP8C,WAAYC,EAAAA,CAAoBA,CAChCC,WAAW,MAGb,UAACJ,EAAAA,CAA4BA,CAAAA,CAC3BC,MACkB,8BAAhB9B,EACIZ,EACAuB,EACExB,EACAD,EAER6C,WAAYG,EAAAA,EAAkBA,CAC9BD,WAAW,QAIjB,UAACtO,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAACC,EAAAA,EAAMA,CAAAA,CACL0D,OAAO,UACPzD,QAAS,KACPiL,GAAc,EAChB,WACD,eAKL,UAACzH,EAAAA,CAAGA,CAAAA,CAAC3B,KAAwB,IAAlBuJ,EAAOjK,MAAM,CAAS,QAAU,cAAesC,OAAQW,EAAQ,SAAW,gBACnF,UAACC,EAAAA,CAAUA,CAAAA,CACTrE,QAAS,KACHoE,EACFiK,CAAAA,EAAAA,EADS,EACTA,CAAeA,CAAC,CACdpP,MAAO,eACPqP,KAAM,UAACzJ,EAAAA,EAAeA,CAAAA,CAACT,MAAOA,GAChC,GAEA6G,GAAc,EAElB,EACApB,MAAOzF,EAAQ1E,EAAAA,EAAc,GAAKA,EAAAA,EAAkB,YAEnD0E,EACG,gCACAkI,EACE,4BACAD,QAKhB,2FCrPA,IAAMkC,EAAuB,wFAGvBC,EAAkB,OAAC,KAAC3C,CAAG,OAAE4C,CAAK,CAA+B,SAAM,KAAC5C,EAAK4C,OAAK,GAGvEC,EAAiC,CAC5CC,EACAC,EACAC,SAQAF,EAAAA,EANA,GAAI,CAACA,EACH,MAAO,EAAE,CAGX,IAAMG,EAAyC,EAAE,CA8BjD,CAlC0B,MAM1BH,SAAAA,OAAAA,EAAAA,EAAqBI,YAArBJ,IAAqBI,GAArBJ,OAAAA,EAAAA,EAAAA,WAAkD,GAAlDA,EAAoDK,OAAO,CAAC,CAA5DL,OAiBsBM,EACKA,EAJZA,EAbb,IAAMC,EAAoBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAwBA,CAACF,EAAQG,aAAa,EAExE,GAAI,CACFC,EAAAA,EAAU,CAACH,EACb,CAAE,QAAM,CACNb,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CAACpP,MAAO,eAAgBqP,KAAMC,CAAmB,GACjE,MACF,CACA,GAAM,wBAACe,CAAsB,CAAEC,gBAAc,CAAC,CAAGX,EAE3CY,EAAmC,CACvCC,cAAeP,EACfQ,SAAU,CACRb,QAASI,OAAAA,EAAAA,EAAQJ,OAAAA,EAARI,EAAmBJ,UAAnBI,eACTK,iBACAC,EACAvF,eAAgBiF,CAAAA,OAAAA,EAAAA,EAAQjF,cAAAA,EAARiF,KAAAA,EAAAA,EAAwBjI,GAAxBiI,CAA4BU,EAAAA,GAAeA,GAAK,EAAE,CAClEC,oBAAqBX,CAAAA,OAAAA,EAAAA,EAAQzD,WAAAA,EAARyD,KAAAA,EAAAA,EAAqBjI,GAArBiI,CAAyBY,EAAAA,EAAuBA,IAAK,EAAE,CAC5EC,oBAAgBlP,CAClB,EACAmP,KAAM,UACNC,kBAAmB,CACjBC,KAAM,IAAIhB,EAAQgB,IAAI,CAACjJ,GAAG,CAACwH,GAC7B,CACF,EACAM,EAAoB7G,IAAI,CAACuH,EAC3B,GACOV,CACT,EAAE,EAG8C,CAC9CoB,EACAC,EACAtB,SAQAqB,EAAAA,EANA,GAAI,CAACA,EACH,MAAO,EAAE,CAGX,IAAMpB,EAAyC,EAAE,CA8BjD,GAlC4B,IAM5BoB,SAAAA,OAAAA,EAAAA,EAAuBnB,cAAvBmB,EAAuC,GAAvCA,OAAAA,EAAAA,EAAyCE,WAAAA,GAAzCF,EAAsDlB,OAAO,CAAC,CAA9DkB,OAiBsBjB,EACKA,EAJZA,EAbb,IAAMC,EAAoBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAwBA,CAACF,EAAQG,aAAa,EAExE,GAAI,CACFC,EAAAA,EAAU,CAACH,EACb,CAAE,QAAM,CACNb,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CAACpP,MAAO,eAAgBqP,KAAMC,CAAmB,GACjE,MACF,CACA,GAAM,wBAACe,CAAsB,gBAAEC,CAAc,CAAC,CAAGY,EAE3CX,EAAmC,CACvCC,cAAeP,EACfQ,SAAU,CACRb,QAASI,OAAAA,EAAAA,EAAQJ,OAAAA,EAARI,EAAmBJ,UAAnBI,eACTK,iBACAC,EACAvF,eAAgBiF,CAAAA,OAAAA,EAAAA,EAAQjF,cAAAA,EAARiF,KAAAA,EAAAA,EAAwBjI,GAAG,CAAC2I,EAAAA,GAAeA,GAAK,EAAE,CAClEC,oBAAqBX,CAAAA,OAAAA,EAAAA,EAAQzD,WAAAA,EAARyD,KAAAA,EAAAA,EAAqBjI,GAArBiI,CAAyBY,EAAAA,EAAuBA,IAAK,EAAE,CAC5EC,oBAAgBlP,CAClB,EACAmP,KAAM,UACNC,kBAAmB,CACjBC,KAAM,IAAIhB,EAAQgB,IAAI,CAACjJ,GAAG,CAACwH,GAAiB,CAEhD,EACAM,EAAoB7G,IAAI,CAACuH,EAC3B,GACOV,CACT,EAAE,wKC/EK,IAAMuB,EAAkB,OAAC,aAACD,CAAW,CAAEtF,OAAK,CAAEX,aAAW,CAAE4F,MAAI,CAAElB,SAAO,CAAQ,GAC/EzE,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,CAACF,GACrB,CAACmG,EAAiBC,EAAmB,CAAGrN,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA4B,MAC5E,CAACsN,EAAeC,EAAiB,CAAGvN,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAkB,MAE9DoL,EACJ,WAACoC,QAAAA,CAAMC,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,wBACxBR,EAAYpJ,GAAG,CAAC,CAACiI,EAAS4B,SAMD5B,EALxB,MACE,WAAC6B,KAAAA,CAAeH,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC3B,EAAQ8B,MAAM,EAAI,cACpD,UAACC,KAAAA,CAAGnS,MAAO,CAACoS,cAAe,QAAQ,WACjC,UAACzR,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,WAAY,SAAUe,IAAK,CAAC,WACtC,UAAC6I,EAAAA,CAAiBA,CAAAA,CAChBH,aAAcwE,OAAAA,EAAAA,EAAQJ,OAAO,EAAfI,EAAmBJ,EACjChE,QADcoE,YACO9E,EACrBW,MAAO,CAAC,CAACV,GAAQU,EACjBoG,QAAQ,IACRzD,KAAK,cAIX,UAACuD,KAAAA,CAAGnS,MAAO,CAACC,MAAO,OAAQmS,cAAe,SAAUE,UAAW,QAAQ,WACrE,UAACC,EAAAA,CACCnC,QAASA,EACTjP,QAAS,KACPuQ,EAAmBtB,GACnBwB,EAAiB,SACnB,QAlBGI,EAuBb,GACCP,GACC,UAACe,EAAAA,CAAeA,CAAAA,CACd3S,OAA0B,WAAlB8R,EACR7R,QAAS,IAAM8R,EAAiB,MAChCV,KAAMA,GAAQ,KACdX,cAAekB,EAAgBlB,aAAa,CAC5Ca,KAAMK,EAAgBL,IAAI,CAC1BnF,MAAOA,EACP+D,QAASA,EACTI,QAASqB,EACTnG,YAAaA,OAKrB,MACE,UAACnI,MAAAA,UACC,WAACsP,EAAAA,CAAKA,CAAAA,CAACzS,MAAO,CAAC0S,YAAa,aAAqC,OAAxB7R,EAAAA,EAAqB,IAAM8R,YAAa,OAAO,YACtF,UAACC,QAAAA,UACC,WAACX,KAAAA,WACC,UAACY,KAAAA,UAAG,WACJ,UAACA,KAAAA,CAAG7S,MAAO,CAACC,MAAO,MAAM,WAAG,iBAG/BwP,MAIT,EAAE,SAEO8C,EAAc,CAAsE,KAAtE,CAACnC,SAAO,SAAEjP,CAAO,CAAqD,CAAtE,EACrB,MACE,UAAC+D,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,8BAA8B2N,UAAU,sBACvD,UAAC5R,EAAAA,EAAMA,CAAAA,CACL8B,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,gBACjBa,QAASA,EACT2Q,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,WAAgC,OAArB3B,EAAQ8B,MAAM,EAAI,QAIzD,wyCCtCAa,EAAAA,EAAKA,CAACC,QAAQ,CAACC,EAAAA,EAAUA,EAMzB,eAAKC,CAAAA,2DAAAA,GAAAA,GAAAA,CAAAA,GAML,IAAMC,EAAqB,CACzB,IAAyB,CACvB1O,CADqB,CACrBA,GAAqBA,CAACgB,OAAO,CAC7BhB,EAAAA,GAAqBA,CAACa,OAAO,CAC7Bb,EAAAA,GAAqBA,CAACC,OAAO,CAC7BD,EAAAA,GAAqBA,CAACI,OAAO,CAC9B,CACD,OAA4B,CAACJ,CAAH,CAAGA,GAAqBA,CAACa,OAAO,CAAC,CAC3D,QAA6B,CAACb,CAAH,CAAGA,GAAqBA,CAACgB,OAAO,CAAC,EAGjD2N,EAAa,QAuDVC,EAyHAC,KAhLW,MACzBhT,CAAI,aACJgL,CAAW,MACXiI,CAAI,gBACJtP,CAAc,cACduP,CAAY,mBACZC,CAAiB,CAQlB,GACO,CAAChR,EAAYiR,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAoB,CAC5EC,SAAU,SACVC,SAAU,CAACnR,MAAM,MAAuB,CAC1C,GAEM,CAACoR,EAAoBC,EAAsB,CAAG1P,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MACnF,CAACiP,EAAiBU,EAAmB,CAAG3P,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MAE7EzE,EAAsB,mBAAIqU,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAAC3I,IAAAA,CAAchL,SAC9D4T,EAAWC,EAAAA,OAAa,CAC5B,IAAMhB,CAAkB,CAAC1Q,EAAW,EAAI0Q,EAAkB,GAAuB,CACjF,CAAC1Q,EAAW,EAGR,OAJsD,MAIrD4Q,CAAW,iBAAEe,CAAe,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAuBA,CAG5D,CACAC,oBAAqB,QAIZlT,EAHP,GAAgD,oBAAoB,CAAhEA,EAAKO,uBAAuB,CAACC,UAAU,CAG3C,cAAOR,EAAAA,EAAKO,uBAAuB,CAAC0E,KAAK,CAACkO,GAAY,EAA/CnT,KAAAA,EAA+C,EAAIgJ,EAAE,CAArDhJ,CAEToT,eAAgB,GACd,GAAyD,oBAAoB,CAAhEpT,EAAKO,uBAAuB,CAACC,UAAU,CAG7CR,EAAKO,uBAAuB,CAAC0E,KAAK,CAFhC,EAAE,CAIb7E,UAAW,qBACT5B,EACAsU,UACF,EACAO,MAAOC,EACPC,SArEc,CAqEJJ,CACZ,GAEAK,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACvB,EAAawB,EAAAA,EAAeA,EAEtD,IAAMC,QAAQzB,GAAAA,OAAAA,EAAAA,EAAajS,IAAI,EAAjBiS,IAAAA,CAAAA,EAAAA,EAAmB1R,GAAnB0R,oBAA0C,CAClDhN,EAAQ8N,EAAAA,OAAa,CACzB,IAAOW,OAAAA,EAAAA,KAAAA,EAAAA,EAAOlT,OAAPkT,GAAOlT,IAAe,mBAAqBkT,EAAMzO,KAAK,CAAG,EAAE,CAClE,CAACyO,EAAM,EAGTX,EAAAA,SAAe,CAAC,KACd,GAAIC,EAAgBW,aAAa,EAAE,GAC7B1O,GAASA,EAAM/D,MAAM,CAAE,KACX+D,EACFA,EADZ,IAAM2O,EAAAA,OAAQ3O,EAAAA,CAAK,CAACA,EAAM/D,MAAM,CAAG,IAArB+D,KAAAA,EAAAA,EAAyB1G,GAAzB0G,MAAkC,CAC1C4O,EAAAA,OAAM5O,EAAAA,CAAK,CAAC,IAANA,KAAAA,EAAAA,EAAU2B,GAAV3B,SAAsB,CAC9B2O,GAASC,KAAK,KAChBzB,GAAAA,EAAe,CAACwB,EAAOC,GAAI,EAE/B,YAFIzB,GAIJA,OAAezR,EAEnB,EAAG,CAACqS,EAAgBW,QAFhBvB,KAE6B,CAAEnN,EAAOmN,EAAa,EAEvDW,EAAAA,SAAe,CAAC,KACVC,EAAgBW,aAAa,EAAE,KACjCtB,GAAAA,EAAoByB,MAAMC,IAAI,CAACjB,UAE/BT,GAAAA,CAFAA,MAEoB1R,EAExB,EAAG,CAACqS,EAAgBW,aAFhBtB,CAE+BA,EAAmBS,EAAS,EAE/DC,EAAAA,SAAe,CAAC,MACVC,EAAgBW,aAAa,EAAK1O,EAAD,MAAa,EAAKgN,EAAD,OAAoB,EAAE,EAC1D+B,KAAK,EAIzB,EAAG,CAAC/O,EAAOgN,EAAYhS,OAAO,CAAE+S,EAAgBW,aAAa,CAAC,EAE9D,GAAM,MAAC3T,CAAI,CAAC,CAAGiS,EAEf,GAAI,CAACjS,EACH,IADS,EAEP,UAACT,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,EAAE,WACzB,UAACuS,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAKvB,GAAIlU,eAA2D,GAAtDO,uBAAuB,CAACC,UAAU,CACzC,MAAO,UAACoE,EAAAA,EAAeA,CAAAA,CAACT,MAAOnE,EAAKO,uBAAuB,GAG7D,GAAgD,iCAAiC,CAA7EP,EAAKO,uBAAuB,CAACC,UAAU,CACzC,MACE,UAACjB,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,EAAE,EAAGb,KAAM,CAACC,eAAgB,QAAQ,WAC3D,UAACa,EAAAA,CAAaA,CAAAA,CAACC,KAAK,aAAa5C,MAAM,0BAK7C,GAAM,CAACuC,iBAAe,CAAC,CAAGvB,EAAKO,uBAAuB,QAElD,EAAOW,MAAM,EAAIG,OAAsC,CAAtCA,EAKnB,iCACE,UAAC9B,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,GAAIwL,WAAY,EAAE,WACzC,WAAC3N,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOL,eAAgB,gBAAiBC,WAAY,QAAQ,YAChFoR,EACD,UAAC5S,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,EAAE,WACnC,UAACqS,EAAAA,CAAa7S,OAAQD,EAAY+S,SAAU9B,WAIjDrN,EAAM/D,MAAM,CACX,WAACmT,EAAAA,WACC,UAAC7C,QAAAA,UACC,WAACX,KAAAA,WACC,UAACY,KAAAA,CAAG7S,MAAO,CAACC,MAAO,GAAG,WAAG,cACzB,UAAC4S,KAAAA,CAAG7S,MAAO,CAACC,MAAO,EAAE,WAAG,WACxB,UAAC4S,KAAAA,CAAG7S,MAAO,CAACC,MAAO,EAAE,WAAG,aACvB0C,IAAoB+S,EAAAA,GAAeA,CAACC,MAAM,CACzC,UAAC9C,KAAAA,CAAG7S,MAAO,CAACC,MAAO,GAAG,WAAG,WACvB,KACJ,UAAC4S,KAAAA,CAAG7S,MAAO,CAACC,MAAO,GAAG,WAAG,WACzB,UAAC4S,KAAAA,CAAG7S,MAAO,CAACC,MAAO,EAAE,WAAG,cAG5B,UAAC4R,QAAAA,UACExL,EAAM8B,GAAG,CAAC,CAACtG,EAAMmQ,IAChB,UAAC4D,EAAAA,CAEC/T,KAAMA,EACNoC,eAAgBA,EAChBrE,oBAAqBA,EACrBoS,MAAOA,EACP6D,cAAe9B,EACf+B,WAAY9B,GANPnS,EAAKuI,EAAE,QAYpB,UAACzJ,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,EAAE,EAAGb,KAAM,CAACC,eAAgB,QAAQ,WAC3D,UAACa,EAAAA,CAAaA,CAAAA,CAACC,KAAK,aAAa5C,MAAM,0BAG1CiG,EAAM/D,MAAM,CAAG,EACd,UAACa,MAAAA,CAAInD,MAAO,CAAC+V,UAAW,MAAM,WAC5B,UAACC,EAAAA,EAAqBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAK5B,MAE3B,KACJ,UAAC6B,EAAAA,CAAiBA,CAAAA,CAChBpW,OAAQ,CAAC,CAACiU,EACVpU,MAAM,OAAEoU,EAAAA,KAAAA,EAAAA,EAAoBpU,MAAM,CAClCuE,aADQ6P,EACQ7P,EAChBrE,oBAAqBA,EACrBE,QAAS,IAAMiU,EAAsB,QAEvC,UAACtU,EAAAA,CAAaA,CAAAA,CACZI,OAAQ,CAAC,CAACyT,EACV5T,OAAQ4T,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAiB5T,MAAAA,EAAjB4T,EAA2B,KACnC3T,EADQ2T,GAAAA,IACC,OAAEA,EAAAA,KAAAA,EAAAA,EAAiB3T,SAAS,CACrCC,OADW0T,aACU1T,EACrBE,QAAS,IAAMkU,EAAmB,WA/D/B,IAmEX,EAAE,EAEmB,OAAC,QACpBtR,CAAM,UACN8S,CAAQ,CAIT,GACOrG,EAAQ,CACZ,CAACnC,GAAG,OAAyB3K,MAAO,WAAW,EAC/C,CAAC2K,GAAG,WAA6B3K,MAAO,WAAW,EACnD,CAAC2K,GAAG,UAA4B3K,MAAO,QAAQ,EAChD,CACK6T,EAAa/G,EAAMgH,IAAI,CAAC,OAAC,KAACnJ,CAAG,CAAC,UAAKA,IAAQtK,IACjD,MACE,UAAC0T,EAAAA,CAAMA,CAAAA,CACLC,aAAc,CAACtV,SAAU,cAAc,EACvCuV,YAAY,EACZJ,WAAYA,EACZ/G,MAAOA,EACPoH,aAAc,CAACC,EAAMC,IAEjB,UAACC,EAAAA,EAAQA,CAAAA,CACPC,OAAQF,EAAMG,SAAS,CAACD,MAAM,CAC9BxV,QAASsV,EAAMI,WAAW,CAE1BC,KAAMN,EAAKnU,KAAK,CAChBrC,MAAO,CAACC,MAAO,OAAO,GAFjBuW,EAAKxJ,GAAG,EAMnB+J,iBAAkB,OAAC,YAAC3H,CAAU,eAAE4H,CAAa,CAAC,GACtCC,EAAgBD,EAAc7O,GAAG,CAACiH,GAAYrH,MAAM,CAACmP,SAC3D,MAAO,UAACC,EAAAA,EAAIA,CAAAA,UAAEF,GAChB,EACAG,aAAc,GAAU5B,EAASgB,EAAKxJ,GAAG,WAEzC,UAAC9L,EAAAA,EAAMA,CAAAA,CACLqC,UAAW,UAACC,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,oBACtBN,MAAO,CAACG,SAAU,QAASkX,QAAS,OAAQnV,eAAgB,eAAe,iBAE1EgU,EAAAA,KAAAA,EAAAA,EAAY7T,KAAK,IAI1B,EAEaiV,CANJpB,CAM0B,OAAC,MAClC5V,CAAI,aACJgL,CAAW,gBACXrH,CAAc,mBACdsT,CAAiB,CACjBC,iBAAe,gBACfC,CAAc,UACdvD,CAAQ,CAST,GACO,CAACwD,EAAgBC,EAAkB,CAAGhE,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAqB,CACrFiE,OAASlY,GAAY,SAACA,EAAM,EAC5BmY,OAAQ,GAA8B,UAArB,OAAOC,EAAGpY,MAAM,CAAgBoY,EAAGpY,MAAM,MAAGqC,CAC/D,GAEM,CAACgW,EAAeC,EAAa,CAAG7D,EAAAA,QAAc,CAAU,IAExDvU,EAAsB,mBAAIqU,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAAC3I,IAAAA,MAAchL,IAC9D+S,EAAc/R,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAA8CoT,EAAoB,CAC5FlT,UAAW,qBACT5B,kBACA4X,EACAC,0BACAvD,EACA+D,MAAOT,EAAkBzV,OAAY,EACvC,EACAN,6BAA6B,CAC/B,GAEAmT,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CACvBvB,EACA,IACA,CAAE0E,CAAAA,GAAkBP,GAAmBC,CAAAA,CAAc,EAEvD,GAAM,MAACrW,CAAI,OAAEmE,CAAK,CAAC,CAAG8N,EAEtB,GAAI,CAACjS,GAAQmE,EACX,KADkB,CAEhB,iCACE,UAAC5E,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAAC6L,IAAK,GAAIJ,WAAY,EAAE,EAAGC,OAAO,kBAC9C,UAAC2J,EAAAA,EAAUA,CAAAA,UAAC,mBAEd,UAACvX,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,EAAE,WACzB,UAACuS,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,iBAMzB,GAAgD,eAAe,CAA3DlU,EAAKO,uBAAuB,CAACC,UAAU,CACzC,MAAO,UAACoE,EAAAA,EAAeA,CAAAA,CAACT,MAAOnE,EAAKO,uBAAuB,GAE7D,GAAIP,iCAA6E,GAAxEO,uBAAuB,CAACC,UAAU,CACzC,OAAO,KAKT,GAAM,OAACyE,EAAQ,EAAE,CAAC,CAAGjF,EAAKO,uBAAuB,CAE3CwW,EAAc,IAClBR,EAAkB9V,EAAOA,EAAKnC,MAAM,CAAGqC,OACzC,EAcA,MACE,iCACE,UAACkU,EAAAA,CAAiBA,CAAAA,CAChBpW,OAAQ,CAAC,CAAC6X,EACVhY,OAAQgY,EACRzT,eAAgBA,EAChBrE,oBAAqBA,EACrBE,QAAS,IAAMqY,OAAYpW,KAE7B,UAACpB,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,GAAIwL,WAAY,EAAE,WACzC,UAAC4J,EAAAA,EAAUA,CAAAA,UAAC,mBAEd,UAACvX,EAAAA,CAAGA,CAAAA,CAAC4N,OAAO,eACV,UAACpI,EAAAA,CAAgBA,CAAAA,CACfE,MAAOA,EACPpC,eAAgBA,EAChBuC,YA5BY,CA4BC4R,GA3Bf,GACFJ,GAAa,UAEXnW,EAAAA,KAAAA,EAAAA,EAAM+D,MAAN/D,EAAc,EACZ0V,GACFA,EAAkB1V,EAAK+D,MAAM,EAE/BoS,GAAa,CAHU,EAK3B,EAmBQvR,aAAc0R,EACdzR,WACE8Q,GAAmBC,EAAiB,CAACA,EAAgBD,EAAgB,MAAGzV,QAMpF,EAAE,SAEO6T,EAAQ,CAahB,KAbgB,MACf/T,CAAI,gBACJoC,CAAc,OACd+N,CAAK,eACL6D,CAAa,YACbC,CAAU,CAQX,CAbgB,EAcT,CAACuC,EAAiBC,EAAkB,CAAGnE,EAAAA,OAAa,CAAC,KACzD,IAAMoE,EAAW1W,EAAK2W,+BAA+B,CASrD,MAAO,CAROC,CAAAA,EAAAA,EAAAA,EAAAA,CAA6BA,CACzCF,EACAG,EAAAA,GAA4BA,CAACC,cAAc,EAE7BF,CAAAA,EAAAA,EAAAA,EAAAA,CAA6BA,CAC3CF,EACAG,EAAAA,GAA4BA,CAACE,iBAAiB,EAEzB,EACtB,OAAC/W,EAAAA,KAAAA,EAAAA,EAAM2W,MAAN3W,yBAAqC,CAAC,EAEpCqC,EAAiBsE,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAAC3G,EAAMmQ,GAEhD,MACE,WAACC,KAAAA,WACC,UAACE,KAAAA,UACC,UAAC5R,EAAAA,CAAgBA,CAAAA,CACfZ,UAAWkC,EAAKlC,SAAS,CACzBa,WAAY,CAACqY,cAAc,EAAOpY,aAAa,CAAI,MAGvD,UAAC0R,KAAAA,UACC,UAACnO,EAAAA,CAAaA,CAAAA,CACZnC,KAAMA,EACNoC,eAAgBA,EAChBC,eAAgBA,MAGpB,UAACiO,KAAAA,UACEjO,EACC,KAEA,UAAC4U,EAAAA,CAAWA,CAAAA,CACVC,UAAWlX,EAAKlC,SAAS,CACzBqZ,QAASnX,EAAKmG,YAAY,EAAIhB,KAAKF,GAAG,GAAK,QAIhDjF,EAAKc,eAAe,GAAK+S,EAAAA,GAAeA,CAACC,MAAM,CAC9C,UAACxD,KAAAA,UACEtQ,EAAKoX,MAAM,CACV,WAACtY,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUe,IAAK,CAAC,YACxD,UAACC,MAAAA,CACCnD,MAAO,CACLkZ,WAAYC,EAAAA,CAAUA,CAACC,SAAS,CAChCC,SAAU,OACVnZ,SAAU,QACVoZ,SAAU,QACZ,WAEA,UAACC,EAAAA,CAAcA,CAAAA,CAACzC,KAAM0C,CAAAA,EAAAA,EAAAA,EAAAA,CAAoBA,CAAC3X,EAAKoX,MAAM,GAAK,OAE7D,UAACQ,EAAAA,CAAcA,CAAAA,CAAC7J,MAAO/N,EAAKoX,MAAM,EAAI,QAGxC,+BAAE,QAGJ,KACJ,UAAC9G,KAAAA,UACC,WAACxR,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACjB,SAAnBe,EACC,WAACtD,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,WAAY,SAAUe,IAAK,CAAC,YACtC,UAACsC,EAAAA,CAAUA,CAAAA,CAACrE,QAAS,IAAM0U,EAAchU,YACf,IAAvBA,EAAK+D,MAAM,CAACtD,MAAM,CACf,kBACA,GAAsB,OAAnBT,EAAK+D,MAAM,CAACtD,MAAM,CAAC,qBAEN,IAArBT,EAAK2I,IAAI,CAAClI,MAAM,CACbT,EAAK2I,IAAI,CAACrC,GAAG,CAAC,GACZ,UAACgM,EAAAA,QAAc,WACb,UAACuF,EAAAA,EAAaA,CAAAA,CAACC,IAAKA,KADDA,EAAIvP,EAAE,GAI7B,QAGN,UAACzJ,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,WAAY,SAAUe,IAAK,CAAC,WACtC,UAACsC,EAAAA,CAAUA,CAAAA,CAACrE,QAAS,IAAM0U,EAAchU,YACtCA,MAAK8D,kCAAkC,CACpC,8BACA,GAA2C,OAAxC9D,EAAK8D,kCAAkC,CAAC,mCAIpD0S,GAAmBC,EAClB,WAACzO,EAAAA,EAAOA,CAAAA,WAAC,IAENwO,EACC,WAAChY,OAAAA,WACEgY,EAAgB,aAAWvS,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACuS,EAAiB,GAAI,KAAK,WAC9DC,EAAoB,IAAM,MAE3B,KACHA,EACC,WAACjY,OAAAA,WACEiY,EAAkB,aAAWxS,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACwS,EAAmB,GAAI,KAAK,eAEnE,KAAK,OAGT,UAGR,UAACnG,KAAAA,UACC,UAACjR,EAAAA,EAAMA,CAAAA,CAACC,QAAS,IAAM2U,EAAWjU,YAAO,kBAIjD,CAEA,IAAM6S,EAAqBjR,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA8B1BmW,EAAAA,EAAmBA,CACnB/V,EAAAA,CAAqBA,CACrBgW,EAAAA,EAAiBA,CACjBC,EAAAA,EAAqBA,EAGnBrE,EAAe1R,CAAAA,EAAAA,EAAAA,EAAAA,CAAMA,CAAC0O,EAAAA,CAAKA,EAAAA,UAAAA,CAAAA,y4BClkB1B,IAAMsH,EAAkBtW,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAoC9BuW,EAAAA,EAA0BA,EAC5B,0BC3BK,IAAMC,EAAa,OAAC,CAACC,oBAAkB,mBAAEC,CAAiB,CAAqB,GAAhBC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAA1CF,qBAAoBC,sBAC9C,IAAME,EACJH,GAAqD,KAA/BA,EAAmBI,OAAO,EAAcJ,EAAmBK,QAAQ,CACrFC,EACJL,IAAoD,GAA/B,CAACA,EAAkBG,OAAO,EAAcH,EAAkBI,QAAQ,QAEpFC,GAAkBH,EAerB,UAAC1Z,EAfmB,CAAgB,CAehCA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAKyZ,GAAAA,UACP,UAACK,EAAAA,CAAKA,CAAAA,CACJ7V,OAAO,UACPxE,MAbJ,CAaWA,CAZT,EACS,WAFQ,EACE,kCAGZ,mCAEF,kCAQH6C,YACE,WAACE,MAAAA,WAAI,UACK,IACR,UAAC4J,IAAAA,CACCzJ,KAAK,oDACLqI,OAAO,SACP+O,IAAI,sBACL,iCAEI,IAAI,4EA3BV,IAkCX,EAAE,qCC9CK,IAAMC,EAAqB,OAAC,QACjCC,CAAM,aACNtP,CAAW,MACXiI,CAAI,CAKL,GACOxL,EAASoM,EAAAA,OAAa,CAC1B,IAAO,EACL/C,KAAM,CACJ,CAACpE,IAAK6N,EAAAA,CAAUA,CAACC,UAAU,CAAElL,MAAOgL,EAAOta,IAAI,EAC/C,CAAC0M,IAAK6N,EAAAA,CAAUA,CAACE,kBAAkB,CAAEnL,MAAOoL,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAAC1P,EAAY,EAC1E,CACH,EACA,CAACA,EAAasP,EAAOta,IAAI,CAAC,EAE5B,MACE,UAAC2a,EAAAA,CAAwBA,CAAAA,CAAClT,OAAQA,EAAQmT,wBAAwB,IAACC,oBAAqB5H,GAE5F,EAAE,kqCCAK,IAAM6H,EAAa,QAuGtBC,KAvGuB,aAAC/P,CAAW,CAA6B,GAClEgQ,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,GAEhB,GAAM,CAACC,YAAU,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,GAC9BC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAAC,WAAsB,OAAXF,IAE5B,IAAMxL,EAAiB,mBAClBkE,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAAC3I,IAAAA,YACzBiQ,IAGI,CAACrH,EAAUwH,EAAY,CAAGrX,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,MAAsCtC,GACxE,CAACwE,EAAWiN,EAAa,CAAGnP,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,MAA+BtC,GACnEP,EAAY+C,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACxB,GAAiB2P,EACR,CACLuD,OAFuB,OAET,OAAElR,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC9BiR,QADgBjR,OACD,OAAEA,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,SAAdA,CACjB2N,CACF,EAEK,CAAC,EACP,CAACA,EAAU3N,EAAU,EAElB,CAAC8G,EAAaC,EAAe,CAAGqG,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAC1DpP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACL,IAAO,EACLqP,SAAU,OACViE,OAAQ,OAAC,MAAC8D,CAAI,CAAC,SAAe,SAATA,EAAkB,OAAS,eAChD/D,OAAQ,GACC,EAAC+D,KAAMC,EAAK3C,YAAQlX,EAAWmS,cAAUnS,EAAS,EAE7D,EACA,EAAE,GAIAsR,EAAc/R,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAA4Cua,EAAmB,CACzFra,UAAW,gBAACuO,CAAc,EAC1BtO,6BAA6B,CAC/B,GAEM4Z,EAAuB/Z,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGnCwa,EAA+B,CAC/Bta,UAAW,gBAACuO,CAAc,EAC1BtO,6BAA6B,CAC/B,GAEMsa,EAAgBnH,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACvB,EAAawB,EAAAA,EAAeA,EACtEmH,EAAgBpH,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACyG,EAAsBxG,EAAAA,EAAeA,EAC/EoH,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACH,EAAeC,GAE/C,MAAC5a,CAAI,SAAEC,CAAO,CAAC,CAAGgS,EAElBE,EACJ,UAAC4I,EAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAIC,IAAI,CAAChP,EAAY,EAClCiP,QAAS,CACP,CAAClS,GAAI,cAAe/H,MAAO,aAAa,EACxC,CAAC+H,GAAI,OAAQ/H,MAAO,MAAM,EAC3B,CACDlB,QAAS,IACPmM,EAAelD,EACjB,IAIJ,GAAI,CAAChJ,GAAQC,EACX,MACE,CAFkB,EAElB,QAACV,EAAAA,CAAGA,CAAAA,CACF4b,OAAQ,CAAC7N,IAAK,EAAE,EAChBzM,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUD,eAAgB,SAAUgB,IAAK,EAAE,YAEhF,UAACmS,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAACnS,MAAAA,CAAInD,MAAO,CAACgL,MAAOnK,EAAAA,EAAgB,EAAE,WAAG,uBAK/C,GAAI,CAACO,GAA0C,uBAAuB,GAApDob,aAAa,CAAC5a,UAAU,CACxC,MACE,UAACjB,EAAAA,CAAGA,CAAAA,CAACkC,QAAS,CAACC,SAAU,EAAE,WACzB,UAACC,EAAAA,CAAaA,CAAAA,CACZC,KAAK,QACL5C,MAAO,0BAAgEkL,MAAAA,CAArCiQ,EAAW,0BAA2C,OAAjBjQ,EAAYhL,IAAI,CAAC,SAMhG,GAAM,eAACkc,CAAa,CAAC,CAAGpb,EACxB,GAAIob,eAA4C,GAA9B5a,UAAU,CAC1B,MAAO,UAACoE,EAAAA,EAAeA,CAAAA,CAACT,MAAOiX,IAGjC,GAAiC,qBAAqB,CAAlDA,EAAc5a,UAAU,CAC1B,MAAO,UAAC6a,EAAAA,EAAQA,CAAAA,CAAC5R,GAAG,sBAGtB,GAAM,UAAC6R,CAAQ,CAAC,CAAGtb,EACb+J,EACJkQ,CAAAA,OAAAA,EAAAA,EAAqBja,IAAAA,EAArBia,KAAAA,EAAAA,EAA2BmB,GAA3BnB,UAAwC,CAACzZ,UAAAA,IAAe,SACpDyZ,EAAqBja,IAAI,CAACob,aAAa,CAACrR,cAAc,CACtD,KAEAwR,EACJH,EAAcI,UAAU,GAAK3O,EAAAA,GAAUA,CAACC,gBAAgB,EACxDsO,EAAcI,UAAU,GAAK3O,EAAAA,GAAUA,CAACE,UAAU,CAE9C+L,EAAqBwC,EAASG,YAAY,CAAC3C,kBAAkB,CAE7DjW,EAAiC0Y,EAAqB,mBAAqB,OAEjF,MACE,WAAC7Y,EAAAA,CAAIA,CAAAA,WACH,UAACgZ,EAAAA,EAAaA,CAAAA,CACZxR,YAAaA,EACbsP,OAAQ4B,EACRK,aAAc3C,EAAmBI,OAAO,CACxC2B,aAAcA,EACd9Q,eAAgBA,GAAkB,OAEpC,UAAC8O,EAAUA,CACTC,OADSD,YACWC,EACpBrX,QAAS,CAACC,SAAU,GAAIwL,WAAY,EAAE,IAExC,UAACgJ,EAAAA,CAAmBA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAClBrT,eAAgBA,EAChBqH,YAAaA,EACbhL,KAAMkc,EAAclc,IAAI,EACpBkB,IAEN,UAACb,EAAAA,CAAGA,CAAAA,CAAC4b,OAAQ,CAAC7N,IAAK,EAAE,EAAGH,OAAO,eACZ,gBAAhBlB,EACC,UAAC+F,EAAAA,CAAUA,CAAAA,CACTG,KAAMA,EACNtP,eAAgBA,EAChBqH,YAAaA,EACbhL,KAAMkc,EAAclc,IAAI,CACxBmT,kBAAmBiI,EACnBlI,aAAcA,IAGhB,UAACmH,EAAkBA,CAACrP,YAAaA,EAAasP,CAA3BD,MAAmC6B,EAAejJ,KAAMA,QAKrF,EAAE,EAEwB9P,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA4BzBsW,EACAlW,EAAAA,CAAqBA,CACrBkZ,EAAAA,CAAwBA,EAGfjB,EAAgCrY,CAAAA,CAL1BsW,CAK0BtW,EAAAA,EAAAA,CAAGA,CAAAA,IAa5CG,EAAAA,CAAmCA,CACnCC,EAAAA,CAAqBA,EACvB,qICpNK,SAASmZ,IACd,GAAM,CAACC,EAAmB,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGtCC,EAAAA,EAA6BA,EAEzBC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,GACjCC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAE1B,MAAOC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAChB,MAAOhc,EAAgDic,KACrD,GAAI,KA+Ba,EA9Bf,IAAMxN,EAAsBiF,MAAMwI,OAAO,CAAClc,EAAUyO,mBAAmB,EACnEzO,EAAUyO,mBAAmB,CAC7B,CAACzO,EAAUyO,mBAAmB,CAAC,CAE7B0N,EAAW1N,EAAoB9H,GAAG,CACtC,GAAYyV,EAAO/M,QAAQ,CAACb,OAAO,EAAI4N,EAAO/M,QAAQ,CAACjF,YAAY,EAGrE,GACE+R,EAASrb,MAAM,GAAK2N,EAAoB3N,MAAM,EAC9Cqb,EAASE,QAAQ,MAAC9b,IAClB4b,EAASE,QAAQ,CAAC,MAElB,CADA,KACM,MACJ,wFAIJ,IAAMC,EAAkE,CACtEH,SAAUA,EAAS5V,MAAM,CAAC,GAA0BzH,KAASyB,OAC7Dgc,iBAAahc,CACf,EAEMic,EAAY,mBACbxc,GAAAA,CACHyO,oBAAqBiF,MAAMwI,OAAO,CAAClc,EAAUyO,mBAAmB,EAC5DzO,EAAUyO,mBAAmB,CAAC9H,GAAG,CAAC8V,EAAAA,EAAyBA,EAC3DA,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACzc,EAAUyO,mBAAmB,IAGvDiO,EAAAA,MAAS,IAAC,MAAMjB,EAAmB,CAACzb,UAAWwc,CAAS,GAAC,CAAG5c,IAAAA,EAAnD,SAAyD6b,GAAzD,eAA2E,CAU1F,OARIiB,IACFC,CAAAA,EAAAA,CADU,CACVA,EAAAA,CAA0BA,CAACD,EAAQZ,EAAS,UAACG,CAAQ,GACrDL,EACEgB,EAAAA,EAAeA,CAACC,oBAAoB,CACpCP,IAIGI,CACT,CAAE,MAAO3Y,EAAO,CACd+Y,QAAQ/Y,KAAK,CAAC,QAASA,GACvBgZ,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAChZ,EAClB,CAEF,EACA,CAAC+X,EAASL,EAAoBG,EAAa,CAE/C,6DC7DO,SAAS5U,EACd3G,CAAoE,CACpEmQ,CAAa,EAEb,MACE,CAACnQ,EAAKmG,YAAY,EAGjB,EAFD,GAEC,GAAgBnG,EAAKa,MAAM,GAAK+B,EAAAA,GAAqBA,CAACC,OAAO,EAC3C,IAAjB7C,EAAKlC,SAAS,CAAUqH,KAAKF,GAAG,GAhBnB,EAgBwB0X,GAhBnB,CAgBmBA,CAAS,CAI7C,EApBsB,KAAK,EAoBlB/F,EACdF,CAA0E,CAC1EkG,CAAkC,EAElC,OAAOlG,EAASmG,MAAM,CAAC,CAACC,EAAKvO,KAC3B,GAAIA,EAAQqO,IAAI,GAAKA,EAAM,CAZ+F,IAa1GrO,EAAd,OAAOuO,EAAOvO,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAQwO,aAAAA,EAARxO,KAAAA,EAAAA,EAAuB9N,GAAvB8N,GAAuB9N,IAAU,CACjD,CACA,OAAOqc,CACT,EAAG,EACL,qLCjCO,IAAME,EAAqB,GAAmB,KAAK,qCCFnD,IAAMC,EAAwB,QAC9BhB,KAD+B,UAACA,CAAQ,CAAyC,SACtF,IAAI,GAACA,GAAAA,OAAAA,EAAAA,EAAUiB,OAAVjB,EAAUiB,EAAVjB,KAAAA,EAAAA,EAAqBxb,GAArBwb,GAA2B,EAI9B,CAJgC,EAIhC,OAACnd,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,WACpC4a,EAASiB,SAAS,CAAC5W,GAAG,CAAC,GACtB,UAAC6W,EAAAA,CAASA,CAAAA,CAA0BC,KAAMjS,EAAIiS,IAAI,CAAEjc,KAAK,SAAzCgK,EAAIiS,IAAI,CAACC,IAAI,CAAC,SAL3B,UAAC7e,OAAAA,CAAAA,EASZ,EAAE,sECAK,IAAM8e,EAAoB,OAAC,aAAC7T,CAAW,QAAEsP,CAAM,CAAQ,GACtD,CACJwE,YAAa,gBAACC,CAAc,eAAEC,CAAa,CAAC,CAC7C,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACjU,EAAYkU,QAAQ,EAE5C,MAAClf,CAAI,CAAC,CAAGsa,EACT7K,EAAiB,mBAClBkE,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAAC3I,IAAAA,CACzBiQ,WAAYjb,IAGR,CAACmf,EAAa,CAACpe,QAASqe,CAAgB,CAAC,CAAC,CAAGxC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAG5DyC,EAAAA,EAAqBA,CAAE,CACvBC,YAAaC,EAAAA,EAA2BA,GAMpCC,EAAgBT,GAAkBC,EAElCS,EAAiBD,EACnB,kCAA4DlF,MAAAA,CAA1Bta,EAAK,uBAA0C,OAArBsa,EAAOoF,aAAa,CAAC,6EACjFC,EAAAA,EAAuBA,CAE3B,MACE,UAAC/a,EAAAA,CAAOA,CAAAA,CACNC,QAAS,UAAChC,MAAAA,CAAInD,MAAO,CAACE,SAAU,QAASggB,UAAW,YAAY,WAAIH,IACpE1I,QAAQ,gBAER,UAACnW,EAAAA,EAAMA,CAAAA,CAAC6N,SAVK2Q,CAUK3Q,EAVe,CAAC+Q,EAUN3e,QAfhB,CAeyBA,IAdvCse,EAAY,CAACje,UAAW,gBAACuO,CAAc,CAAC,EAC1C,WAakD,yBAKpD,EAAE,sIC/CK,SAASoQ,EAAyB,CAMxC,KANwC,cACvCC,GAAe,CAAI,UACnB7H,CAAQ,CAIT,CANwC,EAOjC8H,EAAO9b,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACnB,GAAI,CAACgU,EAASjW,MAAM,CAClB,CADoB,KACb,EAAE,CAEX,IAAM+d,EAAyE,EAAE,CAUjF,OATA9H,EAASpI,OAAO,CAAC,OAAC,CAACyO,eAAa,mBAAE0B,CAAiB,MAAE7B,CAAI,CAAC,SACxDG,GAAAA,EAAezO,OAAO,CAAC,IACrBkQ,EAAKjX,IAAI,CAAC,EADZwV,GAEI5R,EACAuT,IAAKD,OACL7B,CACF,EACF,EACF,GACO4B,CACT,EAAG,CAAC9H,EAAS,SAEb,EAAUjW,EAAN,IAAY,CAKd,WAAC3B,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,GAAIsd,KAAM,CAAC,YAC9CJ,EACC,WAACzf,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUe,IAAK,CAAC,YACxD,UAACM,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,cACX,UAAC4X,EAAAA,EAAUA,CAAAA,UAAC,kCAEZ,KACJ,WAACzF,EAAAA,CAAKA,CAAAA,CAACzS,MAAO,CAAC0S,YAAa,aAAqC,OAAxB7R,EAAAA,EAAqB,GAAI,YAChE,UAAC+R,QAAAA,UACC,WAACX,KAAAA,WACC,UAACY,KAAAA,UAAG,cACJ,UAACA,KAAAA,UAAG,yBACJ,UAACA,KAAAA,UAAG,0BAGR,UAAChB,QAAAA,UACEwO,EAAKlY,GAAG,CAAC,GAAmB6J,QAAlB,KAAChF,CAAG,KAAEuT,CAAG,CAAE9B,MAAI,CAAC,GACzB,MACE,WAACxM,KAAAA,WACC,UAACE,KAAAA,UAAInF,IACL,UAACmF,KAAAA,UAAIoO,IACL,UAACpO,KAAAA,UACEsM,IAAS/F,EAAAA,GAA4BA,CAACC,cAAc,CACnD,UAAChU,EAAAA,CAAGA,CAAAA,CAACC,OAAO,mBACV,UAACvE,OAAAA,UAAK,oBAGR,UAACsE,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBACV,UAACvE,OAAAA,UAAK,2BAVL2R,EAgBb,WAtCC,IA2CX,i6BCHO,IAAMyO,EAAqB,IAChC,GAAM,QAAC5gB,CAAM,SAAEC,CAAO,MAAEQ,CAAI,CAAC,CAAGmW,EAChC,MACE,UAAC1W,EAAAA,EAAMA,CAAAA,CACLF,OAAQA,EACRC,QAASA,EACTE,MAAO,CAACC,MAAO,OAAQoX,QAAS,MAAM,EACtCrU,KAAK,eACL5C,MAAO,2BAAgC,OAALE,YAElC,UAACogB,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAiBjK,KAGxB,EAAE,GAEmB,QA0Cc3G,EAsE7BA,KAhHgB,aAACxE,CAAW,MAAEhL,CAAI,eAAEqgB,CAAa,SAAE7gB,CAAO,SAAEkQ,CAAO,CAAQ,GACzE4Q,EAAaC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,GAE1B,CAACC,EAAa,CAAG5D,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAChC6D,IAEI,CAACC,EAAkB,CAAG9D,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGrC+D,EAAAA,CAAmBA,EACf,CAACC,EAAgB,CAAGhE,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGnCiE,EAAAA,CAAyBA,EACrB,CAACC,EAAgB,CAAGlE,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGnCmE,EAAAA,EAAkCA,EAE9B,CAACpI,EAAQqI,EAAU,CAAGjd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAACsc,GAE/B,CAACY,EAAYC,EAAc,CAAGnd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvC,CAACod,EAAWC,EAAa,CAAGrd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACrC,CAACkB,EAAOoc,EAAS,CAAGtd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MACzD,CAACyL,EAAqB8R,EAAuB,CACjDvd,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAqC,MAEzC0L,EAAiCxL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAC5C,IAAO,EACLgX,WAAYjb,EACZmQ,uBAAwBnF,EAAYkU,QAAQ,CAC5C9O,eAAgBpF,EAAYhL,IAAI,CAClC,EACA,CAACgL,EAAahL,EAAK,EAEf2P,GAAsB1L,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACjC,IACEuL,GAAuBC,EACnBF,CAAAA,EAAAA,EAAAA,CAAAA,CAA8BA,CAACC,EAAqBC,EAAgBC,GACpE,EAAE,CACR,CAACD,EAAgBD,EAAqBE,EAAQ,EAE1C6R,SAA2B/R,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,KAAAA,EAAAA,EAAuCgS,GAAvChS,sBAAgE,CAE3FiS,GAAavE,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,cAQhBU,EAGL9c,EAVRogB,GAAc,GAOd,IAAMpgB,EAAAA,OAAO8c,EAAAA,CANE,MAAM4C,EAAa,CAChCtf,UAAW,CACTwgB,aAAcjS,SACdkJ,CACF,CACF,IACoB7X,IAAAA,EAAP8c,KAAAA,EAAAA,EAAa4C,GAAb5C,SAAyB,CAClC9c,EACEA,IADI,GACJA,EAAAA,KAAAA,EAAAA,EAAMQ,MAANR,IAAMQ,IAAe,wBACvB,OAAIR,GAAAA,EAAK8O,gBAAAA,EAAL9O,KAAAA,EAAAA,EAAuBmE,GAAvBnE,EAAuBmE,EAAO,EACvBnE,EAAK8O,gBAAgB,CAAC3K,KAAK,EAEpCqc,EAAuBxgB,GAEhBA,OAAAA,EAAAA,KAAAA,EAAAA,EAAMQ,MAANR,IAAMQ,IAAe,sBAC9B4N,CADqD,EACrDA,EAAAA,EAAAA,CAAeA,CAAC,CACdpP,MAAO,mBACPqP,KAAM,kCAAuC,OAALnP,EAC1C,GAEAqhB,EAASvgB,GAGX6gB,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,4CAEpBT,GAAc,EAChB,EAAG,CAACV,EAAc/Q,EAAgBkJ,EAAQ3Y,EAAK,EAEzC4hB,GAAqB1E,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,cACtB1N,EAAf,IAAMmJ,QAASnJ,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,KAAAA,EAAAA,EAAuCmJ,GAAvCnJ,GAA6C,CAC5D,GAAI,CAACmJ,EACH,MADW,CAGb,GAAM,MAAC7X,CAAI,CAAC,CAAG,MAAM4f,EAAkB,CACrCxf,UAAW,gBAACuO,SAAgBkJ,CAAM,CACpC,GACA,GAAI7X,OAAAA,EAAAA,KAAAA,EAAAA,EAAM+gB,MAAN/gB,SAAqB,CAACQ,UAAAA,IAAe,SACvC,CADiD,KAC3CwgB,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,CAAC,CAACnd,QAAS,uBAAwBL,OAAQ,SAAS,QACtE,SAAIxD,EAAAA,KAAAA,EAAAA,EAAM+gB,MAAN/gB,SAAqB,CAAE,CAChC,IAAMmE,EAAQnE,EAAK+gB,eACnB,OAAMC,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,CAAC,CACtBxd,OAAQ,SACRK,QACE,WAACod,EAAAA,CAAKA,CAAAA,CAAC9f,UAAU,MAAM+f,QAAS,YAC9B,UAACnf,MAAAA,UAAI,gCACL,UAACqC,EAAAA,CAAUA,CAAAA,CACTwF,MAAOnK,EAAAA,EAAqB,GAC5B0hB,UAAU,SACVphB,QAAS,KACPqO,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CACdpP,MAAO,eACPqP,KACElK,kBAAM3D,UAAU,CACd,UAACoE,EAAAA,EAAeA,CAAAA,CAACT,MAAOA,IAExB,kBAEN,EACF,WACD,iBAKP,EACF,CACF,EAAG,OAACuK,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAgB,EAArCJ,KAAAA,EAAAA,EAAuCmJ,GAAvCnJ,GAA6C,CAAEC,EAAgBiR,EAAkB,EAE/EwB,GAAkCxF,CAAAA,EAAAA,EAAAA,CAAAA,CAAkCA,GAEpEyF,GAAWle,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAEG,MAAxB,IAAgC0L,GAAoB3N,MAAM,CAAG,GAC7D,CAACuf,OAAAA,GAAAA,KAAAA,EAAAA,GAA0Bvf,MAAAA,IAAU,EAAK,EAE3C,CAAC2N,GAAqB4R,GAAyB,EAE5Ca,CAJDb,EAIWrE,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,UAC1B,GAAKiF,CAAD,GAIJ7B,EAAW,IAJI,iBAKfc,GAAa,GAEb,GAAI,QACEG,GAAAA,KAAAA,EAAAA,GAA0Bvf,MAAAA,EAAQ,CACpC,MAAMqgB,QAAQC,CADZf,EACe,CACfA,GAAyB1Z,GAAG,CAAC,MAAOiI,IAC9BA,EAAQqO,IAAI,GAAK/F,EAAAA,GAA4BA,CAACC,cAAc,CAC9D,CADgE,KAC1DgK,QAAQC,GAAG,CACf,CAACxS,EAAQwO,aAAa,EAAI,IAAIzW,GAAG,CAAC,MAAO0a,IACvC,MAAM3B,EAAgB,CACpB1f,UAAW,CACTshB,mBAAoB,CAClBpS,eAAgBpF,EAAYhL,IAAI,CAChCmQ,uBAAwBnF,EAAYkU,QAAQ,EAE9Cc,kBAAmBlQ,EAAQkQ,iBAAiB,cAC5CuC,CACF,CACF,EACF,IAEOzS,EAAQwO,aAAa,EAAIxO,EAAQwO,aAAa,CAACtc,MAAM,EAAE,MAC1D8e,EAAgB,CACpB5f,UAAW,CACTshB,mBAAoB,CAClBpS,eAAgBpF,EAAYhL,IAAI,CAChCmQ,uBAAwBnF,EAAYkU,QAAQ,EAE9Cc,kBAAmBlQ,EAAQkQ,iBAAiB,CAC5C1B,cAAexO,EAAQwO,aAAa,CAExC,EAEJ,IAGA3O,IACF,MAAMuS,GAAgC,QADf,aACgBvS,EAAmB,EAAG,SAE/DiS,IACF,CAAE,MAAOa,EAAG,CACVzE,QAFsB,KAET,CAACyE,EAChB,CAEArB,GAAa,GACb5hB,IACF,EAAG,CACD2iB,GACAvB,EACAE,EACAS,GACA5R,GACAuS,GACA1iB,EACAoiB,GACA5W,EACAsV,EACD,EAEKoC,GAAcze,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC1B,EACS,KAGLuL,GAAuBvK,CAJZ,CAMX,UAACrE,EAAAA,EAAMA,CAAAA,CACL8B,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,4BACjBwR,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,aACpB5Q,QAAS,KACPygB,EAAuB,MACvBD,EAAS,KACX,WACD,cAKI,KAER,CAACF,EAAW3R,EAAqBvK,EAAM,EAEpC0d,GAAe1e,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC3B,GAAIkd,EACF,MAAO,GADM,EACN,KAAC9gB,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,IAG7C,GAAI4M,GAAuBvK,EAAO,KACZuK,EAApB,IAAMyB,QAAczB,GAAAA,MAAAA,GAAAA,EAAqBI,gBAAgB,EAArCJ,KAAAA,EAAAA,EAAuCyB,GAAvCzB,QAAkD,CAChEoT,EAAiB3R,OAAAA,EAAAA,KAAAA,EAAAA,EAAajP,MAAAA,GAAU,EACxC6gB,EAAU,CAAC5d,GAA4B,IAAnB2d,SAE1B,EAEI,KAFO,GAEP,EAACviB,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,WAClC,UAAChC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,YAGrBqjB,EAEP,OAFgB,EAEhB,EAACxiB,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,YAClC,UAAChC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,UAE1B,UAACoF,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,sBAAsB2N,UAAU,mBAC/C,UAAC5R,EAAAA,EAAMA,CAAAA,CACL8B,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,iBACjBsE,OAAO,UACPzD,QAAS+gB,GACTpQ,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,+BAEpB,UAAC5O,MAAAA,UAAI,8BAOX,WAACxC,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,YAClC,UAAChC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,UAC1B,UAACoF,EAAAA,CAAOA,CAAAA,CACNke,QAAS,CAACX,IAAYhB,EACtBtc,QAAQ,+DACR2N,UAAU,mBAEV,UAAC5R,EAAAA,EAAMA,CAAAA,CACL8B,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,iBACjBsE,OAAO,UACPmK,SAAU,CAAC0T,IAAYhB,EACvBtgB,QAASuhB,GACT5Q,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,uBAEpB,UAAC5O,MAAAA,UAAI,8CAMjB,QACA,EAEI,UAACxC,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,WAClC,UAAChC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,aAK5B,WAACa,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,CAAC,YAClC,UAAChC,EAAAA,EAAMA,CAAAA,CAACC,QAASrB,WAAS,WAC1B,UAACoB,EAAAA,EAAMA,CAAAA,CAACC,QAAS4gB,GAAYnd,OAAO,UAAUkN,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,qBAAa,eAMvF,EAAG,CACD0P,EACA3R,EACAvK,EACAgc,EACAzhB,EACAoiB,GACAO,GACAC,GACAX,GACD,EAEK5c,GAAUZ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACtB,GAAIkd,EACF,MACE,GAFW,EAEX,MAAC9gB,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,EAAGhB,eAAgB,SAAUC,WAAY,QAAQ,YAClF,UAACkT,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAACnS,MAAAA,UAAI,sBAIX,GAAI2M,GAAuBvK,EAAO,KACZuK,EAIlBA,EA8CqBA,EAiCdA,EAAAA,EAnFT,IAAMyB,QAAczB,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,KAAAA,EAAAA,EAAuCyB,GAAvCzB,QAAkD,CAChEoT,EAAiB3R,OAAAA,EAAAA,KAAAA,EAAAA,EAAajP,MAAAA,GAAU,EACxC6gB,EAAU,CAAC5d,GAA4B,IAAnB2d,EACpBrB,QACJ/R,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,KAAAA,EAAAA,EAAuCgS,GAAvChS,sBAAgE,CAClE,MACE,WAACnP,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACrC,WAACmgB,GAAAA,WACC,WAAClgB,MAAAA,WACC,UAAC+U,EAAAA,EAAUA,CAAAA,UAAC,WACZ,UAACvX,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACue,KAAM,EAAGre,WAAY,QAAQ,WACvC,UAACgB,MAAAA,UACEoC,EACC,UAACZ,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBAAS,WACnBse,EACF,WAACve,EAAAA,CAAGA,CAAAA,CAACC,OAAO,oBAAWse,EAAe,mBAEtC,UAACve,EAAAA,CAAGA,CAAAA,CAACC,OAAO,mBAAU,mBAK9B,WAACzB,MAAAA,WACC,UAAC+U,EAAAA,EAAUA,CAAAA,UAAC,sBACZ,UAACoL,MAAAA,UAAKrK,OAAAA,EAAAA,KAAAA,EAAAA,EAAQ3W,MAAAA,EAAR2W,EAA0B,eAGpC,WAACtY,EAAAA,CAAGA,CAAAA,WACD4E,EACC,UAACpC,MAAAA,UACC,UAAC6C,EAAAA,EAAeA,CAAAA,CAACT,MAAOA,MAExB,KACH4d,EACC,WAACxiB,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACrC,UAACgV,EAAAA,EAAUA,CAAAA,CAAClY,MAAO,CAACujB,aAAc,CAAC,WAAG,uBACtC,UAACpgB,MAAAA,UACC,UAACqgB,GAAAA,UACC,UAACzgB,EAAAA,CAAaA,CAAAA,CACZC,KAAK,UACL5C,MAAM,oBACN6C,YACE,iCACE,UAAC5C,OAAAA,UAAK,uFAIN,WAACA,OAAAA,WACC,UAACojB,KAAAA,CAAAA,GAAK,eACO,IACZ3T,OAAAA,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,KAAAA,EAAAA,EAAuC1K,GAAvC0K,OAAiD,EAC9C,IAAoD,OAAhDA,EAAoBI,gBAAgB,CAAC9K,UAAU,CAAC,KACpD,2CAQhB,KACH8d,GAAkB3R,EACjB,WAAC5Q,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACrC,WAACgV,EAAAA,EAAUA,CAAAA,WAAC,mBAAiBgL,EAAe,OAC5C,UAAC1R,EAAAA,CAAeA,CAAAA,CACdD,YAAaA,EACbjR,KAAMA,EACN0P,QAASA,EACT/D,OAAO,EACPX,YAAaA,OAGf,KACHuW,OAAAA,EAAAA,KAAAA,EAAAA,EAA0Bvf,MAAAA,EACzB,UAACa,MAAAA,CAAInD,CADN6hB,KACa,CAAC9L,UAAW,MAAM,WAC5B,UAACoK,EAAwBA,CAAC5H,SAAUsJ,MAEpC,MAFyB1B,EAK/B,WAACuD,GAAAA,WACC,UAACxL,EAAAA,EAAUA,CAAAA,UAAC,0BACZ,UAACoL,MAAAA,UACExT,OAAAA,GAAAA,OAAAA,EAAAA,EAAqBI,gBAAAA,EAArBJ,CAAAA,OAAAA,EAAAA,EAAAA,MAAuCmJ,EAAvCnJ,KAAAA,EAAAA,EAA+CxN,GAA/CwN,GAAqD,QAClDA,EAAAA,KAAAA,EAAAA,EAAqBI,gBAAgB,CAAC+I,IAAtCnJ,EAA4C,CAC5CvK,EACE,QACA,cAKhB,QACA,EAEI,UAFY,CAEX5E,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,EAAGhB,eAAgB,SAAUC,WAAY,QAAQ,YAClF,UAACkT,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAACnS,MAAAA,UAAI,yBAKP,WAACxC,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,SAAUW,IAAK,CAAC,YACrC,UAACC,MAAAA,UAAI,4BACL,UAACwgB,EAAAA,EAASA,CAAAA,CACR/T,MAAOqJ,EACPzD,SAAU,GAAO8L,EAAUyB,EAAEpX,MAAM,CAACiE,KAAK,EACzCkC,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,gBACpB6R,YAAY,yBAEd,UAACzgB,MAAAA,UAAI,wQAKL,WAACA,MAAAA,WACC,UAAC4J,IAAAA,CAAEzJ,KAAK,yGAAgG,eAEnG,IAAI,qBAMnB,EAAG,CAACwM,EAAqBvK,EAAOgc,EAAYE,EAAWnhB,EAAM0P,EAAS1E,EAAa2N,EAAO,EAE1F,MACE,iCACE,UAAClT,EAAAA,EAAUA,CAAAA,UACT,UAAC5C,MAAAA,CAAInD,MAAO,CAACiP,UAAW,OAAO,WAAI9J,OAErC,UAACnE,EAAAA,EAAYA,CAAAA,CAACC,SAAS,IAAC4iB,KAAMb,YAC3BC,OAIT,EAEalC,GAA2Btd,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA6BvCwH,EAAAA,CAAoBA,CACpBpH,EAAAA,CAAqBA,EAGnBwf,GAAOtf,EAAAA,EAAMA,CAACZ,GAAG,4NAIMtC,EAAAA,EAAqB,GAC9CqX,EAAAA,EAAUA,EAYRwL,GAAqB3f,EAAAA,EAAMA,CAACZ,GAAG,gMAIjC+U,EAAAA,EAAUA,EAYRsL,GAAiCzf,EAAAA,EAAMA,CAACZ,GAAG,8HAC7C2gB,EAAAA,CAAoBA,ECrkBXC,GAA2B,OAAC,QACvC9K,CAAM,MACN3Y,CAAI,aACJgL,CAAW,SACX0E,CAAO,YACP4M,CAAU,CACoB,GACxB,CAACoH,EAAoBC,EAAsB,CAAG5f,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAE7D,MACE,WAAC1D,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUe,IAAK,CAAC,YACxD,UAACgC,EAAAA,CAAOA,CAAAA,CACNke,QAASxG,IAAe3O,EAAAA,GAAUA,CAACiW,QAAQ,CAC3C/e,QAAQ,6CACR2N,UAAU,mBAEV,UAAC5R,EAAAA,EAAMA,CAAAA,CACL6N,SAAU6N,IAAe3O,EAAAA,GAAUA,CAACiW,QAAQ,CAC5C/iB,QAAS,IAAM8iB,EAAsB,IACrCjhB,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,0BAClB,0BAIH,UAACmgB,EAAkBA,CACjB5gB,OAAQmkB,EACRlkB,MAFiB2gB,EAER,IAAMwD,GAAsB,GACrCtD,cAAe1H,EACf3Y,KAAMA,EACNgL,YAAaA,EACb0E,QAASA,MAIjB,EAAE,4EChBF,IAAMmU,GAAc,CAAC1jB,YAAa,GAAMoY,aAAc,EAAK,EAW9CW,GAAuB,IAClC,GAAIP,GAAUA,EAAOmL,UAAU,CAAC,gBAAiB,CAC/C,IAAMC,EAAYC,KAAKC,KAAK,CAACtL,GAE7B,OADA,OAAOoL,EAAU,OAAD,EAAa,CACtBG,OAAOC,OAAO,CAACJ,GACnBtc,MAAM,CAAC,GAAsB,OAAZ2c,CAAI,CAAC,EAAE,EAAyB,IAAZA,CAAI,CAAC,EAAE,EAC5Cvc,GAAG,CAAC,OAAC,CAACwc,EAAGC,EAAE,SAAK,GAAQA,MAAAA,CAALD,EAAE,KAAK,OAAFC,KACxB1F,IAAI,CAAC,IACV,CACA,OAAOjG,CACT,EAAE,GAwB2B,QAgEN2B,EAAAA,KAhEO,QAC5BA,CAAM,aACNtP,CAAW,cACXuR,CAAY,cACZZ,CAAY,CACZ9Q,gBAAc,CAOf,GACO,MACJ7K,CAAI,CACJukB,YAAa,CAACniB,QAAM,OAAE2D,CAAK,CAAC,UAC5ByX,CAAQ,CACT,CAAGlD,EAEE,aACJwE,CAAW,iBACX0F,CAAe,CACfzjB,QAAS0jB,CAAkB,CAC5B,CAAGxF,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACjU,EAAYkU,QAAQ,EAC5C,uBAACwF,CAAqB,CAAC,CAAG5F,EAE1B,CAAC6F,EAAiBC,EAAiB,CAAG7gB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAC/C0L,EAAiB,CACrBwL,WAAYX,EAAOta,IAAI,CACvBoQ,eAAgBpF,EAAYhL,IAAI,CAChCmQ,uBAAwBnF,EAAYkU,QAAQ,EAGxC2F,EAAa9e,EAAM/D,MAAM,CAAG+D,CAAK,CAAC,EAAE,CAAG,KACvC4S,EACJ2B,EAAOiK,WAAW,CAACO,gBAAgB,EACgB,eAAnDxK,EAAOiK,WAAW,CAACO,gBAAgB,CAACxjB,UAAU,EAC9CgZ,EAAOiK,WAAW,CAACO,gBAAgB,CAACC,UAAU,CAE1CC,EAAU5iB,IAAW6iB,EAAAA,GAAiBA,CAACC,OAAO,CAEpD,MACE,iCACE,UAACC,EAAAA,CAAUA,CAAAA,CACTrlB,MACE,WAACslB,EAAAA,EAASA,CAAAA,CAAC1lB,MAAO,CAACqX,QAAS,OAAQsO,cAAe,MAAOziB,IAAK,CAAC,YAC9D,UAACyK,EAAAA,EAAIA,CAAAA,CAAC9C,GAAG,uBAAc,eACvB,UAACxK,OAAAA,UAAK,MACLC,KAGL0C,KAAK,UACLoO,KACE,WAACzM,EAAAA,CAAGA,CAAAA,CAAC3B,KAAK,oBAAU,aACR,UAAC4iB,GAAAA,CAAcA,CAAAA,CAACta,YAAaA,OAG3Cua,MACE,WAACllB,EAAAA,CAAGA,CAAAA,CAAC4b,OAAQ,CAAC7N,IAAK,CAAC,EAAGzM,KAAM,CAACM,UAAW,MAAOJ,WAAY,SAAUe,IAAK,CAAC,YAC1E,UAAC4iB,GAAAA,EAAqBA,CAAAA,CAAC7J,aAAcA,IACrC,UAAC8H,GAAwBA,CACvB9K,OAAQA,GAAU,GAClB3Y,KAAMsa,EAFiBmJ,IAEN,CACjBzY,YAAaA,EACb0E,QAAS4K,QAAAA,EAAAA,EAAOvP,OAAAA,GAAPuP,OAAAA,EAAAA,CAAgB,CAAhBA,EAAiB,EAAjBA,KAAAA,EAAAA,EAAqBhP,GAArBgP,SAAiC,GAAI,GAC9CgC,WAAYhC,EAAOgC,UAAU,QAKrC,UAACmJ,EAAAA,EAAgBA,CAAAA,UACf,WAAClU,QAAAA,WACE+I,EAAO3X,WAAW,CACjB,WAACgP,KAAAA,WACC,UAACE,KAAAA,UAAG,gBACJ,UAACA,KAAAA,UAAIyI,EAAO3X,WAAW,MAEvB,KACH2X,EAAOoL,MAAM,CAAC1jB,MAAM,CAAG,GACtB,WAAC2P,KAAAA,WACC,UAACE,KAAAA,UAAG,WACJ,UAACA,KAAAA,UACC,UAAC8T,GAAAA,CAAgBA,CAAAA,CAACD,OAAQpL,EAAOoL,MAAM,QAI7C,WAAC/T,KAAAA,WACC,UAACE,KAAAA,UAAG,gBACJ,UAACA,KAAAA,UACEgT,EACC,+BACE,WAACxkB,EAAAA,CAAGA,CAAAA,CACFsB,KAAM,CAACM,UAAW,MAAOW,IAAK,EAAGf,WAAY,QAAQ,EACrDnC,MAAO,CAAC+V,UAAW,MAAM,YAEzB,UAACxV,GAAAA,CAAgBA,CAAAA,CAACZ,UAAWwlB,EAAWxlB,SAAS,CAAEa,WAAY2jB,KAC/D,UAACngB,GAAAA,CAAaA,CAAAA,CAACnC,KAAMsjB,EAAYlhB,eAAe,cAIpD,4BAIL2W,EAAOsL,QAAQ,EAAIrJ,GAAgByI,GAClC,WAACrT,KAAAA,WACC,UAACE,KAAAA,UAAG,cACJ,UAACA,KAAAA,UAEC,UAAC5R,GAAAA,CAAgBA,CAAAA,CAACZ,UAAWib,EAAOsL,QAAQ,CAACvmB,SAAS,CAAGa,WAAY2jB,UAIzEvJ,EAAOvP,OAAO,EAAIuP,EAAOvP,OAAO,CAAC/I,MAAM,EAAK6I,EAC5C,WAAC8G,KAAAA,WACC,UAACE,KAAAA,UAAG,WACJ,UAACgU,GAAAA,UACC,UAACjb,GAAAA,CAAoBA,CAAAA,CACnBG,QAASuP,EAAOvP,OAAO,CACvBC,YAAaA,EACbH,eAAgBA,GAAkB,KAClCC,eAAgBwP,EAAOgC,UAAU,QAIrC,KACJ,WAAC3K,KAAAA,WACC,UAACE,KAAAA,UACC,UAACxR,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,WAAY,QAAQ,EAAGnC,MAAO,CAACgC,OAAQ,MAAM,WAAG,cAI9D,UAACmQ,KAAAA,UACC,WAACxR,EAAAA,CAAGA,CAAAA,CACFsB,KAAM,CAACM,UAAW,MAAOW,IAAK,GAAIf,WAAY,QAAQ,EACtDnC,MAAO,CAACgC,OAAQ,MAAM,YAEtB,UAACokB,EAAAA,CAAYA,CAAAA,CAAC9a,YAAaA,EAAasP,OAAQA,IAC/CA,EAAOyL,QAAQ,EAAI,UAAClH,EAAiBA,CAAC7T,YAAaA,EAAd6T,OAAmCvE,YAI/E,WAAC3I,KAAAA,WACC,UAACE,KAAAA,UAAG,cACJ,UAACA,KAAAA,UAAImU,CAtKsBC,GAIrC,CAHI,IACFA,EAAqB,IAEnBA,CAFuB,CAEF,IAAMA,EAAqB,EAH3B,EAG+B,IACxB,OAAnBA,EAAmB,QAEL,MAAM,CAA7BA,EACM,UAENA,EAAqB,MAAQA,EAAqB,KAC7C,CADmD,GACvB,OAAxBA,EAAqB,GAAG,QAEV,OAAO,CAA9BA,EACM,SAENA,EAAqB,OAASA,EAAqB,MAC9C,CADqD,GACvB,OAA1BA,EAAqB,KAAK,UAEhC,IAA+B,OAA3BA,EAAqB,MAAM,QACxC,EAAE,EAkJ6CA,kBAAkB,OAEtDzI,EAASiB,SAAS,EAAIjB,EAASiB,SAAS,CAACzc,MAAM,CAC9C,WAAC2P,KAAAA,WACC,UAACE,KAAAA,UAAG,qBACJ,UAACA,KAAAA,UACC,UAAC2M,EAAqBA,CAAChB,SAAUA,SAAXgB,KAI3BlE,EAAOgC,UAAU,GAAK3O,EAAAA,GAAUA,CAACC,gBAAgB,EAClD0M,EAAOgC,UAAU,GAAK3O,EAAAA,GAAUA,CAACE,UAAU,CACzC,WAAC8D,KAAAA,WACC,UAACE,KAAAA,UACC,UAACxR,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACE,WAAY,QAAQ,EAAGnC,MAAO,CAACgC,OAAQ,MAAM,WAAG,aAI9D,WAACmQ,KAAAA,WACC,WAACxR,EAAAA,CAAGA,CAAAA,CAACsB,KAAM,CAACM,UAAW,MAAOW,IAAK,GAAIf,WAAY,QAAQ,YACzD,UAAC9B,OAAAA,CAAKL,MAAO,CAACkZ,WAAYC,EAAAA,CAAUA,CAACC,SAAS,CAAEC,SAAU,MAAM,WAC7DJ,EAASO,GAAqBP,GAAU,SAE3C,UAAC/T,EAAAA,CAAOA,CAAAA,CACNke,QAAS,CAAC4B,EACV7f,QAAS2f,EAAgBE,qBAAqB,UAE9C,UAAC9jB,EAAAA,EAAMA,CAAAA,CACL8B,KAAM,UAACQ,EAAAA,EAAIA,CAAAA,CAAClD,KAAK,SACjByO,SAAU,CAACiW,GAAyBD,EACpC5jB,QAAS,IAAM+jB,EAAiB,aAE/BjM,IAAWO,GAAqBP,GAAU,kBAAoB,cAIrE,UAACuN,EAAAA,CAAgBA,CAAAA,CACf3mB,OAAQolB,EACRlV,eAAgBA,EAChBkJ,OAAQA,GAAkB,GAC1BnZ,GADiBmZ,KACR,IAAMiM,GAAiB,WAIpC,KACJ,UAACrG,EAAkBA,CAACvT,YAAaA,EAAaiQ,CAA3BsD,UAAuCve,WAKpE,EAAE,GAEiByD,EAAAA,EAAMA,CAACoO,EAAE","sources":["webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleAssetSelectionsQuery.tsx","webpack://_N_E/../ui-components/src/components/Page.tsx","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/automation/AutomationAssetSelectionFragment.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTargetList.tsx","webpack://_N_E/../ui-core/src/util/buildExecutionParamsList.ts","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-core/src/launchpad/useLaunchMultipleRunsWithTelemetry.ts","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/sensors/SensorAlertDetails.oss.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/ticks/EvaluateTickButtonSensor.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\n\nexport const SCHEDULE_ASSET_SELECTIONS_QUERY = gql`\n  query ScheduleAssetSelectionQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import styled from 'styled-components';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\n\nexport const AUTOMATION_ASSET_SELECTION_FRAGMENT = gql`\n  fragment AutomationAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetChecks {\n      name\n      assetKey {\n        path\n      }\n    }\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetSelectionNodeFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  fragment AssetSelectionNodeFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      automationCondition {\n        __typename\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport {memo, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\nimport '../util/dayjsExtensions';\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n  const showNowLine = minX < now && now < maxX;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const numTicks = Math.ceil((maxX - startTickGridX) / tickGridDelta);\n  const numLabels = Math.ceil(numTicks / 5);\n\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let ii = 0; ii < numTicks; ii++) {\n      const time = startTickGridX + ii * tickGridDelta;\n      ticks.push({\n        time,\n        x: getX(time, viewport.width, minX, fullRange),\n        showLabel: ii % numLabels === 0,\n      });\n    }\n    return ticks;\n  }, [numTicks, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, numLabels]);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>\n                    <Timestamp timestamp={{ms: tick.time}} timeFormat={{showSeconds: true}} />\n                  </Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          {showNowLine ? (\n            <NowIndicator\n              style={{\n                transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n              }}\n            />\n          ) : null}\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n\n    return (\n      <div>\n        <Caption as=\"div\">\n          <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showSeconds: true}} />\n        </Caption>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import {gql} from '../apollo-client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n    assetChecks {\n      name\n      assetKey {\n        path\n      }\n    }\n  }\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Mono,\n  Subtitle2,\n  Tab,\n  Tabs,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  labelForAssetCheck,\n  renderItemAssetCheck,\n  renderItemAssetKey,\n  sortItemAssetCheck,\n  sortItemAssetKey,\n} from '../assets/AssetListUtils';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {AutomationAssetSelectionFragment} from './types/AutomationAssetSelectionFragment.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {\n  assetDetailsPathForAssetCheck,\n  assetDetailsPathForKey,\n} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype AutomationType = 'schedule' | SensorType;\n\nexport const AutomationTargetList = ({\n  assetSelection,\n  automationType,\n  targets,\n  repoAddress,\n}: {\n  automationType: AutomationType;\n  repoAddress: RepoAddress;\n  targets: {pipelineName: string}[] | null;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets && !assetSelection) {\n    return <span />;\n  }\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  if (assetSelection) {\n    return <AssetSelectionTag assetSelection={assetSelection} automationType={automationType} />;\n  }\n\n  if (visibleTargets?.length) {\n    return (\n      <Box flex={{direction: 'row', gap: 4}}>\n        {visibleTargets.map((target) =>\n          target.pipelineName ? (\n            <Tag icon=\"job\" tooltipText={target.pipelineName} key={target.pipelineName}>\n              <PipelineReference\n                key={target.pipelineName}\n                pipelineName={target.pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n              />\n            </Tag>\n          ) : null,\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <Tag>\n      <div style={{color: Colors.textLight()}}>None</div>\n    </Tag>\n  );\n};\n\nconst ALL_ASSETS_STRING = 'all materializable assets';\n\nconst AssetSelectionTag = ({\n  assetSelection,\n  automationType,\n}: {\n  assetSelection: AutomationAssetSelectionFragment;\n  automationType: AutomationType;\n}) => {\n  const [showDialog, setShowDialog] = useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const {checks, assets, assetsWithAMP, assetsWithoutAMP} = useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return {checks: [], assets: [], assetsWithAMP: [], assetsWithoutAMP: []};\n    }\n    const assets = assetSelection.assetsOrError.nodes;\n\n    return {\n      checks: assetSelection.assetChecks.slice().sort(sortItemAssetCheck),\n      assets: assets.map((a) => a.key).sort(sortItemAssetKey),\n      assetsWithAMP: assets\n        .filter((asset) => !!asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n      assetsWithoutAMP: assets\n        .filter((asset) => !asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n    };\n  }, [assetSelection]);\n\n  const [selectedTab, setSelectedTab] = useState('none');\n  const initialTab = checks.length && !assets.length ? 'checks' : 'assets';\n  useEffect(() => setSelectedTab(initialTab), [initialTab]);\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n  const isAllAssets = assetSelectionString === ALL_ASSETS_STRING;\n\n  if (checks.length === 0 && assets.length === 1 && assets[0]) {\n    return (\n      <Tag icon=\"asset\">\n        <Link to={assetDetailsPathForKey(assets[0])}>{displayNameForAssetKey(assets[0])}</Link>\n      </Tag>\n    );\n  }\n\n  if (assets.length === 0 && checks.length === 1 && checks[0]) {\n    return (\n      <Tag icon=\"asset_check\">\n        <Link to={assetDetailsPathForAssetCheck(checks[0])}>{labelForAssetCheck(checks[0])}</Link>\n      </Tag>\n    );\n  }\n\n  const splitConditioned =\n    automationType === SensorType.AUTO_MATERIALIZE || automationType === SensorType.AUTOMATION;\n\n  return (\n    <>\n      <Dialog\n        isOpen={showDialog}\n        title=\"Targeted assets\"\n        onClose={() => setShowDialog(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box\n          flex={{direction: 'column', gap: 16}}\n          padding={{horizontal: 20, vertical: 16}}\n          border=\"bottom\"\n        >\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Subtitle2>Asset selection</Subtitle2>\n            <Mono>{assetSelectionString}</Mono>\n          </Box>\n        </Box>\n\n        <Box padding={{horizontal: 20, top: 8}} border=\"bottom\">\n          <Tabs size=\"small\" selectedTabId={selectedTab}>\n            {splitConditioned ? (\n              <Tab\n                id=\"assets\"\n                title={`Assets with Automation Conditions (${assetsWithAMP.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            ) : (\n              <Tab\n                id=\"assets\"\n                title={`Assets (${assets.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            )}\n            {splitConditioned && (\n              <Tab\n                id=\"assets-without-conditions\"\n                disabled={assetsWithoutAMP.length === 0}\n                title={`Other Assets (${assetsWithoutAMP.length})`}\n                onClick={() => setSelectedTab('assets-without-conditions')}\n              />\n            )}\n            <Tab\n              id=\"checks\"\n              disabled={checks.length === 0}\n              title={`Checks ${checks.length}`}\n              onClick={() => setSelectedTab('checks')}\n            />\n          </Tabs>\n        </Box>\n        <Box flex={{direction: 'column'}} style={{maxHeight: '60vh', minHeight: '300px'}}>\n          {selectedTab === 'checks' ? (\n            <VirtualizedItemListForDialog\n              items={checks}\n              renderItem={renderItemAssetCheck}\n              itemBorders\n            />\n          ) : (\n            <VirtualizedItemListForDialog\n              items={\n                selectedTab === 'assets-without-conditions'\n                  ? assetsWithoutAMP\n                  : splitConditioned\n                    ? assetsWithAMP\n                    : assets\n              }\n              renderItem={renderItemAssetKey}\n              itemBorders\n            />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowDialog(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <Tag icon={assets.length === 1 ? 'asset' : 'asset_group'} intent={error ? 'danger' : 'none'}>\n        <ButtonLink\n          onClick={() => {\n            if (error) {\n              showCustomAlert({\n                title: 'Python error',\n                body: <PythonErrorInfo error={error} />,\n              });\n            } else {\n              setShowDialog(true);\n            }\n          }}\n          color={error ? Colors.textRed() : Colors.linkDefault()}\n        >\n          {error\n            ? 'Error loading asset selection'\n            : isAllAssets\n              ? 'All materializable assets'\n              : assetSelectionString}\n        </ButtonLink>\n      </Tag>\n    </>\n  );\n};\n","import * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {asAssetCheckHandleInput, asAssetKeyInput} from '../assets/asInput';\nimport {ExecutionParams, ScheduleSelector, SensorSelector} from '../graphql/types';\nimport {sanitizeConfigYamlString} from '../launchpad/yamlUtils';\nimport {ScheduleDryRunInstigationTick} from '../ticks/EvaluateScheduleDialog';\nimport {SensorDryRunInstigationTick} from '../ticks/SensorDryRunDialog';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSensor = (\n  sensorExecutionData: SensorDryRunInstigationTick,\n  sensorSelector: SensorSelector,\n  jobName: string,\n) => {\n  if (!sensorExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  sensorExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = sensorSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: request.assetSelection?.map(asAssetKeyInput) || [],\n        assetCheckSelection: request.assetChecks?.map(asAssetCheckHandleInput) || [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSchedule = (\n  scheduleExecutionData: ScheduleDryRunInstigationTick,\n  scheduleSelector: ScheduleSelector,\n  jobName: string,\n) => {\n  if (!scheduleExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  scheduleExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = scheduleSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: request.assetSelection?.map(asAssetKeyInput) || [],\n        assetCheckSelection: request.assetChecks?.map(asAssetCheckHandleInput) || [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n","import {Box, Button, Colors, Icon, Table, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {RunConfigDialog} from '../runs/RunConfigDialog';\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n  const [selectedRequest, setSelectedRequest] = useState<RunRequestFragment | null>(null);\n  const [visibleDialog, setVisibleDialog] = useState<'config' | null>(null);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td style={{verticalAlign: 'middle'}}>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td style={{width: '7.5%', verticalAlign: 'middle', textAlign: 'center'}}>\n              <PreviewButton\n                request={request}\n                onClick={() => {\n                  setSelectedRequest(request);\n                  setVisibleDialog('config');\n                }}\n              />\n            </td>\n          </tr>\n        );\n      })}\n      {selectedRequest && (\n        <RunConfigDialog\n          isOpen={visibleDialog === 'config'}\n          onClose={() => setVisibleDialog(null)}\n          mode={mode || null}\n          runConfigYaml={selectedRequest.runConfigYaml}\n          tags={selectedRequest.tags}\n          isJob={isJob}\n          jobName={jobName}\n          request={selectedRequest}\n          repoAddress={repoAddress}\n        />\n      )}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>Target</th>\n            <th style={{width: '7.5%'}}>Actions</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\nfunction PreviewButton({request, onClick}: {request: RunRequestFragment; onClick: () => void}) {\n  return (\n    <Tooltip content=\"Preview run config and tags\" placement=\"left-start\">\n      <Button\n        icon={<Icon name=\"data_object\" />}\n        onClick={onClick}\n        data-testid={testId(`preview-${request.runKey || ''}`)}\n      />\n    </Tooltip>\n  );\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  NonIdealState,\n  Select,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport {useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick} from './util';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanizeSensorCursor} from '../sensors/SensorDetails';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickResultType, TickStatusTag} from '../ticks/TickStatusTag';\nimport {CopyIconButton} from '../ui/CopyButton';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\n\nenum TickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nconst STATUS_DISPLAY_MAP = {\n  [TickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [TickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [TickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  tickResultType,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tickResultType: TickResultType;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<TickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: TickStatusDisplay.ALL},\n  });\n\n  const [showDetailsForTick, setShowDetailsForTick] = useState<HistoryTickFragment | null>(null);\n  const [showLogsForTick, setShowLogsForTick] = useState<HistoryTickFragment | null>(null);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () => STATUS_DISPLAY_MAP[tickStatus] || STATUS_DISPLAY_MAP[TickStatusDisplay.ALL],\n    [tickStatus],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && tickStatus === TickStatusDisplay.ALL) {\n    return null;\n  }\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={tickStatus} onChange={setTickStatus} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n              <th style={{width: 80}}>Logs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                tickResultType={tickResultType}\n                instigationSelector={instigationSelector}\n                index={index}\n                onShowDetails={setShowDetailsForTick}\n                onShowLogs={setShowLogsForTick}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n      <TickDetailsDialog\n        isOpen={!!showDetailsForTick}\n        tickId={showDetailsForTick?.tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowDetailsForTick(null)}\n      />\n      <TickLogDialog\n        isOpen={!!showLogsForTick}\n        tickId={showLogsForTick?.tickId ?? null}\n        timestamp={showLogsForTick?.timestamp}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowLogsForTick(null)}\n      />\n    </>\n  );\n};\n\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: TickStatusDisplay;\n  onChange: (value: TickStatusDisplay) => void;\n}) => {\n  const items = [\n    {key: TickStatusDisplay.ALL, label: 'All ticks'},\n    {key: TickStatusDisplay.SUCCESS, label: 'Requested'},\n    {key: TickStatusDisplay.FAILED, label: 'Failed'},\n  ];\n  const activeItem = items.find(({key}) => key === status);\n  return (\n    <Select<(typeof items)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={items}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      itemListRenderer={({renderItem, filteredItems}) => {\n        const renderedItems = filteredItems.map(renderItem).filter(Boolean);\n        return <Menu>{renderedItems}</Menu>;\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  tickResultType,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n  tickResultType: TickResultType;\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<string | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => (typeof qs.tickId === 'string' ? qs.tickId : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector,\n      beforeTimestamp,\n      afterTimestamp,\n      statuses,\n      limit: beforeTimestamp ? undefined : 15,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? tick.tickId : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      if (onHighlightRunIds) {\n        onHighlightRunIds(tick.runIds);\n      }\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          tickResultType={tickResultType}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  tickResultType,\n  index,\n  onShowDetails,\n  onShowLogs,\n}: {\n  tick: HistoryTickFragment;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n  index: number;\n  onShowDetails: (tick: HistoryTickFragment) => void;\n  onShowLogs: (tick: HistoryTickFragment) => void;\n}) {\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag\n          tick={tick}\n          tickResultType={tickResultType}\n          isStuckStarted={isStuckStarted}\n        />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div\n                style={{\n                  fontFamily: FontFamily.monospace,\n                  fontSize: '14px',\n                  maxWidth: '400px',\n                  overflow: 'hidden',\n                }}\n              >\n                <MiddleTruncate text={humanizeSensorCursor(tick.cursor) || ''} />\n              </div>\n              <CopyIconButton value={tick.cursor || ''} />\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          {tickResultType === 'runs' ? (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.runIds.length === 1\n                  ? '1 run requested'\n                  : `${tick.runIds.length} runs requested`}\n              </ButtonLink>\n              {tick.runs.length === 1\n                ? tick.runs.map((run) => (\n                    <React.Fragment key={run.id}>\n                      <RunStatusLink run={run} />\n                    </React.Fragment>\n                  ))\n                : null}\n            </Box>\n          ) : (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.requestedAssetMaterializationCount === 1\n                  ? '1 materialization requested'\n                  : `${tick.requestedAssetMaterializationCount} materializations requested`}\n              </ButtonLink>\n            </Box>\n          )}\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n        </Box>\n      </td>\n      <td>\n        <Button onClick={() => onShowLogs(tick)}>View logs</Button>\n      </td>\n    </tr>\n  );\n}\n\nconst TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {gql} from '../apollo-client';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n    owners {\n      ... on UserDefinitionOwner {\n        email\n      }\n      ... on TeamDefinitionOwner {\n        team\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport {RunsFeedTableWithFilters} from '../runs/RunsFeedTable';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const filter = React.useMemo(\n    () => ({\n      tags: [\n        {key: DagsterTag.SensorName, value: sensor.name},\n        {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n      ],\n    }),\n    [repoAddress, sensor.name],\n  );\n  return (\n    <RunsFeedTableWithFilters filter={filter} includeRunsFromBackfills actionBarComponents={tabs} />\n  );\n};\n","import {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n  const assetSelection =\n    selectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? selectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  const isAutomationSensor =\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION;\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  const tickResultType: TickResultType = isAutomationSensor ? 'materializations' : 'runs';\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        assetSelection={assetSelection || null}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline\n        tickResultType={tickResultType}\n        repoAddress={repoAddress}\n        name={sensorOrError.name}\n        {...variables}\n      />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            tickResultType={tickResultType}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showLaunchError} from './showLaunchError';\nimport {useMutation} from '../apollo-client';\nimport {paramsWithUIExecutionTags} from './uiExecutionTags';\nimport {TelemetryAction, useTelemetryAction} from '../app/Telemetry';\nimport {\n  LAUNCH_MULTIPLE_RUNS_MUTATION,\n  LaunchBehavior,\n  handleLaunchMultipleResult,\n} from '../runs/RunUtils';\nimport {\n  LaunchMultipleRunsMutation,\n  LaunchMultipleRunsMutationVariables,\n} from '../runs/types/RunUtils.types';\n\nexport function useLaunchMultipleRunsWithTelemetry() {\n  const [launchMultipleRuns] = useMutation<\n    LaunchMultipleRunsMutation,\n    LaunchMultipleRunsMutationVariables\n  >(LAUNCH_MULTIPLE_RUNS_MUTATION);\n\n  const logTelemetry = useTelemetryAction();\n  const history = useHistory();\n\n  return useCallback(\n    async (variables: LaunchMultipleRunsMutationVariables, behavior: LaunchBehavior) => {\n      try {\n        const executionParamsList = Array.isArray(variables.executionParamsList)\n          ? variables.executionParamsList\n          : [variables.executionParamsList];\n\n        const jobNames = executionParamsList.map(\n          (params) => params.selector.jobName || params.selector.pipelineName,\n        );\n\n        if (\n          jobNames.length !== executionParamsList.length ||\n          jobNames.includes(undefined) ||\n          jobNames.includes(null)\n        ) {\n          throw new Error(\n            'Error: Invalid job names. Each RunRequest must specify a job name to launch all runs',\n          );\n        }\n\n        const metadata: {[key: string]: string | string[] | null | undefined} = {\n          jobNames: jobNames.filter((name): name is string => name !== undefined),\n          opSelection: undefined,\n        };\n\n        const finalized = {\n          ...variables,\n          executionParamsList: Array.isArray(variables.executionParamsList)\n            ? variables.executionParamsList.map(paramsWithUIExecutionTags)\n            : paramsWithUIExecutionTags(variables.executionParamsList),\n        };\n\n        const result = (await launchMultipleRuns({variables: finalized})).data?.launchMultipleRuns;\n\n        if (result) {\n          handleLaunchMultipleResult(result, history, {behavior});\n          logTelemetry(\n            TelemetryAction.LAUNCH_MULTIPLE_RUNS,\n            metadata as {[key: string]: string | string[] | null | undefined},\n          );\n        }\n\n        return result;\n      } catch (error) {\n        console.error('error', error);\n        showLaunchError(error as Error);\n      }\n      return undefined;\n    },\n    [history, launchMultipleRuns, logTelemetry],\n  );\n}\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {RepoAddress} from '../workspace/types';\n\nexport interface Props {\n  repoAddress: RepoAddress;\n  sensorName: string;\n}\n\nexport const SensorAlertDetails = (_props: Props) => null;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {useMutation} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip\n      content={<div style={{maxWidth: '500px', wordBreak: 'break-word'}}>{tooltipContent}</div>}\n      display=\"flex\"\n    >\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  NonIdealStateWrapper,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {gql, useMutation} from '../apollo-client';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {useTrackEvent} from '../app/analytics';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {DELETE_DYNAMIC_PARTITIONS_MUTATION} from '../assets/DeleteDynamicPartitionsDialog';\nimport {\n  DeleteDynamicPartitionsMutation,\n  DeleteDynamicPartitionsMutationVariables,\n} from '../assets/types/DeleteDynamicPartitionsDialog.types';\nimport {DynamicPartitionsRequestType, SensorSelector} from '../graphql/types';\nimport {useLaunchMultipleRunsWithTelemetry} from '../launchpad/useLaunchMultipleRunsWithTelemetry';\nimport {CREATE_PARTITION_MUTATION} from '../partitions/CreatePartitionDialog';\nimport {\n  AddDynamicPartitionMutation,\n  AddDynamicPartitionMutationVariables,\n} from '../partitions/types/CreatePartitionDialog.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {buildExecutionParamsListSensor} from '../util/buildExecutionParamsList';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorDryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"preview_tick\"\n      title={`Preview tick result for ${name}`}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const trackEvent = useTrackEvent();\n\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n  const [createPartition] = useMutation<\n    AddDynamicPartitionMutation,\n    AddDynamicPartitionMutationVariables\n  >(CREATE_PARTITION_MUTATION);\n  const [deletePartition] = useMutation<\n    DeleteDynamicPartitionsMutation,\n    DeleteDynamicPartitionsMutationVariables\n  >(DELETE_DYNAMIC_PARTITIONS_MUTATION);\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [launching, setLaunching] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] =\n    useState<SensorDryRunInstigationTick | null>(null);\n\n  const sensorSelector: SensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n  const executionParamsList = useMemo(\n    () =>\n      sensorExecutionData && sensorSelector\n        ? buildExecutionParamsListSensor(sensorExecutionData, sensorSelector, jobName)\n        : [],\n    [sensorSelector, sensorExecutionData, jobName],\n  );\n  const dynamicPartitionRequests = sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const onCommitTickResult = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      return;\n    }\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const launchMultipleRunsWithTelemetry = useLaunchMultipleRunsWithTelemetry();\n\n  const canApply = useMemo(() => {\n    return (\n      (executionParamsList != null && executionParamsList.length > 0) ||\n      (dynamicPartitionRequests?.length || 0) > 0\n    );\n  }, [executionParamsList, dynamicPartitionRequests]);\n\n  const onApply = useCallback(async () => {\n    if (!canApply) {\n      return;\n    }\n\n    trackEvent('launch-all-sensor');\n    setLaunching(true);\n\n    try {\n      if (dynamicPartitionRequests?.length) {\n        await Promise.all(\n          dynamicPartitionRequests.map(async (request) => {\n            if (request.type === DynamicPartitionsRequestType.ADD_PARTITIONS) {\n              await Promise.all(\n                (request.partitionKeys || []).map(async (partitionKey) => {\n                  await createPartition({\n                    variables: {\n                      repositorySelector: {\n                        repositoryName: repoAddress.name,\n                        repositoryLocationName: repoAddress.location,\n                      },\n                      partitionsDefName: request.partitionsDefName,\n                      partitionKey,\n                    },\n                  });\n                }),\n              );\n            } else if (request.partitionKeys && request.partitionKeys.length) {\n              await deletePartition({\n                variables: {\n                  repositorySelector: {\n                    repositoryName: repoAddress.name,\n                    repositoryLocationName: repoAddress.location,\n                  },\n                  partitionsDefName: request.partitionsDefName,\n                  partitionKeys: request.partitionKeys,\n                },\n              });\n            }\n          }),\n        );\n      }\n      if (executionParamsList) {\n        await launchMultipleRunsWithTelemetry({executionParamsList}, 'toast');\n      }\n      onCommitTickResult(); // persist tick\n    } catch (e) {\n      console.error(e);\n    }\n\n    setLaunching(false);\n    onClose();\n  }, [\n    canApply,\n    createPartition,\n    deletePartition,\n    dynamicPartitionRequests,\n    executionParamsList,\n    launchMultipleRunsWithTelemetry,\n    onClose,\n    onCommitTickResult,\n    repoAddress,\n    trackEvent,\n  ]);\n\n  const leftButtons = useMemo(() => {\n    if (launching) {\n      return null;\n    }\n\n    if (sensorExecutionData || error) {\n      return (\n        <Button\n          icon={<Icon name=\"settings_backup_restore\" />}\n          data-testid={testId('try-again')}\n          onClick={() => {\n            setSensorExecutionData(null);\n            setError(null);\n          }}\n        >\n          Try again\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  }, [launching, sensorExecutionData, error]);\n\n  const rightButtons = useMemo(() => {\n    if (launching) {\n      return <Box flex={{direction: 'row', gap: 8}}></Box>;\n    }\n\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n\n      if (error) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n          </Box>\n        );\n      } else if (didSkip) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n\n            <Tooltip content=\"Commits tick result\" placement=\"top-end\">\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                onClick={onCommitTickResult}\n                data-testid={testId('commit-tick-result')}\n              >\n                <div>Commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      } else {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n            <Tooltip\n              canShow={!canApply || launching}\n              content=\"Applies requests, launches all runs, and commits tick result\"\n              placement=\"top-end\"\n            >\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                disabled={!canApply || launching}\n                onClick={onApply}\n                data-testid={testId('launch-all')}\n              >\n                <div>Apply requests & commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      }\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('continue')}>\n            Continue\n          </Button>\n        </Box>\n      );\n    }\n  }, [\n    launching,\n    sensorExecutionData,\n    error,\n    submitting,\n    onClose,\n    onCommitTickResult,\n    canApply,\n    onApply,\n    submitTest,\n  ]);\n\n  const content = useMemo(() => {\n    if (launching) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Launching runs</div>\n        </Box>\n      );\n    }\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Grid>\n            <div>\n              <Subheading>Result</Subheading>\n              <Box flex={{grow: 1, alignItems: 'center'}}>\n                <div>\n                  {error ? (\n                    <Tag intent=\"danger\">Failed</Tag>\n                  ) : numRunRequests ? (\n                    <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                  ) : (\n                    <Tag intent=\"warning\">Skipped</Tag>\n                  )}\n                </div>\n              </Box>\n            </div>\n            <div>\n              <Subheading>Used cursor value</Subheading>\n              <pre>{cursor?.length ? cursor : 'None'}</pre>\n            </div>\n          </Grid>\n          <Box>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading style={{marginBottom: 8}}>Requested runs (0)</Subheading>\n                <div>\n                  <SkipReasonNonIdealStateWrapper>\n                    <NonIdealState\n                      icon=\"missing\"\n                      title=\"No runs requested\"\n                      description={\n                        <>\n                          <span>\n                            The sensor function was successfully evaluated but didn&apos;t return\n                            any run requests.\n                          </span>\n                          <span>\n                            <br />\n                            Skip reason:{' '}\n                            {sensorExecutionData?.evaluationResult?.skipReason\n                              ? `\"${sensorExecutionData.evaluationResult.skipReason}\"`\n                              : 'No skip reason was output'}\n                          </span>\n                        </>\n                      }\n                    />\n                  </SkipReasonNonIdealStateWrapper>\n                </div>\n              </Box>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading>Requested runs ({numRunRequests})</Subheading>\n                <RunRequestTable\n                  runRequests={runRequests}\n                  name={name}\n                  jobName={jobName}\n                  isJob={true}\n                  repoAddress={repoAddress}\n                />\n              </Box>\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n\n          <ComputedCursorGrid>\n            <Subheading>Computed cursor value</Subheading>\n            <pre>\n              {sensorExecutionData?.evaluationResult?.cursor?.length\n                ? sensorExecutionData?.evaluationResult.cursor\n                : error\n                  ? 'Error'\n                  : 'None'}\n            </pre>\n          </ComputedCursorGrid>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor value (optional)</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n            placeholder=\"Enter a cursor value\"\n          />\n          <div>\n            A cursor tracks where a sensor left off, allowing the sensor to efficiently process new\n            changes or events without missing anything or duplicating work. The cursor is typically\n            a string, and can be updated within the sensor&apos;s logic to reflect the latest state.\n          </div>\n          <div>\n            <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n              Learn more\n            </a>{' '}\n            about cursors\n          </div>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, launching, name, jobName, repoAddress, cursor]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder left={leftButtons}>\n        {rightButtons}\n      </DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst ComputedCursorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  padding-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst SkipReasonNonIdealStateWrapper = styled.div`\n  ${NonIdealStateWrapper} {\n    margin: auto !important;\n    width: unset !important;\n    max-width: unset !important;\n  }\n`;\n","import {Box, Button, Icon, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {SensorDryRunDialog} from './SensorDryRunDialog';\nimport {SensorType} from '../graphql/types';\nimport {RepoAddress} from '../workspace/types';\n\ninterface EvaluateTickButtonSensorProps {\n  cursor: string;\n  name: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  sensorType: SensorType;\n}\n\nexport const EvaluateTickButtonSensor = ({\n  cursor,\n  name,\n  repoAddress,\n  jobName,\n  sensorType,\n}: EvaluateTickButtonSensorProps) => {\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Tooltip\n        canShow={sensorType !== SensorType.STANDARD}\n        content=\"Testing not available for this sensor type\"\n        placement=\"top-end\"\n      >\n        <Button\n          disabled={sensorType !== SensorType.STANDARD}\n          onClick={() => setShowTestTickDialog(true)}\n          icon={<Icon name=\"preview_tick\" />}\n        >\n          Preview tick result\n        </Button>\n      </Tooltip>\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => setShowTestTickDialog(false)}\n        currentCursor={cursor}\n        name={name}\n        repoAddress={repoAddress}\n        jobName={jobName}\n      />\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FontFamily,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Subtitle1,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {SensorAlertDetails} from 'shared/sensors/SensorAlertDetails.oss';\nimport styled from 'styled-components';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {EvaluateTickButtonSensor} from '../ticks/EvaluateTickButtonSensor';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {AutomationAssetSelectionFragment} from '../automation/types/AutomationAssetSelectionFragment.types';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {DefinitionOwners} from '../owners/DefinitionOwners';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\n/** Some cursors are persisted Python tuples, which come through as JSON. Examples:\n * {\"__class__\": \"AirflowPollingSensorCursor\", \"dag_query_offset\": 0, \"end_date_gte\": 1743134332.087687, \"end_date_lte\": null}\n * {\"__class__\": \"RunStatusSensorCursor\", \"record_id\": 1234, \"update_timestamp\": \"1743134332.087687\", \"record_timestamp\": null}\n *\n * For these, there are often empty / unused fields and we can pull just the cursor fields that are in use\n * into a compact table-ready presentation:\n *\n * end_date_gte=1743134332.087687\n */\nexport const humanizeSensorCursor = (cursor: string | false | null) => {\n  if (cursor && cursor.startsWith('{\"__class__\"')) {\n    const cursorObj = JSON.parse(cursor);\n    delete cursorObj['__class__'];\n    return Object.entries(cursorObj)\n      .filter((pair) => pair[1] !== null && pair[1] !== 0)\n      .map(([k, v]) => `${k}=${v}`)\n      .join(',');\n  }\n  return cursor;\n};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  assetSelection,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const {\n    permissions,\n    disabledReasons,\n    loading: loadingPermissions,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {canUpdateSensorCursor} = permissions;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Subtitle1 style={{display: 'flex', flexDirection: 'row', gap: 4}}>\n            <Link to=\"/automation\">Automation</Link>\n            <span>/</span>\n            {name}\n          </Subtitle1>\n        }\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <EvaluateTickButtonSensor\n              cursor={cursor || ''}\n              name={sensor.name}\n              repoAddress={repoAddress}\n              jobName={sensor.targets?.[0]?.pipelineName || ''}\n              sensorType={sensor.sensorType}\n            />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          {sensor.owners.length > 0 && (\n            <tr>\n              <td>Owners</td>\n              <td>\n                <DefinitionOwners owners={sensor.owners} />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} tickResultType=\"runs\" />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                {/* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */}\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || assetSelection ? (\n            <tr>\n              <td>Target</td>\n              <TargetCell>\n                <AutomationTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  assetSelection={assetSelection || null}\n                  automationType={sensor.sensorType}\n                />\n              </TargetCell>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? humanizeSensorCursor(cursor) : 'None'}\n                  </span>\n                  <Tooltip\n                    canShow={!canUpdateSensorCursor}\n                    content={disabledReasons.canUpdateSensorCursor}\n                  >\n                    <Button\n                      icon={<Icon name=\"edit\" />}\n                      disabled={!canUpdateSensorCursor || loadingPermissions}\n                      onClick={() => setCursorEditing(true)}\n                    >\n                      {cursor !== humanizeSensorCursor(cursor) ? 'View Raw / Edit' : 'Edit'}\n                    </Button>\n                  </Tooltip>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n          <SensorAlertDetails repoAddress={repoAddress} sensorName={name} />\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n\nconst TargetCell = styled.td`\n  button {\n    line-height: 20px;\n  }\n`;\n"],"names":["TickLogDialog","tickId","timestamp","instigationSelector","isOpen","onClose","Dialog","style","width","maxWidth","minWidth","title","span","name","TimestampDisplay","timeFormat","showSeconds","QueryfulTickLogsTable","Box","background","Colors","zIndex","position","DialogFooter","topBorder","Button","onClick","data","loading","useQuery","TICK_LOG_EVENTS_QUERY","variables","notifyOnNetworkStatusChange","events","instigationStateOrError","__typename","tick","logEvents","undefined","height","flex","justifyContent","alignItems","SpinnerWithText","label","length","direction","InstigationEventLogTable","tickStatus","status","instigationType","instigationLoggingDocsUrl","padding","vertical","NonIdealState","icon","description","gap","div","action","ExternalAnchorButton","href","rightIcon","Icon","gql","INSTIGATION_EVENT_LOG_FRAGMENT","SCHEDULE_ASSET_SELECTIONS_QUERY","AUTOMATION_ASSET_SELECTION_FRAGMENT","PYTHON_ERROR_FRAGMENT","Page","styled","TickStatusTag","tickResultType","isStuckStarted","showErrors","setShowErrors","useState","tag","useMemo","requestedItem","InstigationTickStatus","STARTED","Tag","intent","SKIPPED","BaseTag","fillColor","runKeys","message","Tooltip","content","skipReason","targetTagName","FAILURE","error","ButtonLink","SUCCESS","count","requestedAssetMaterializationCount","runIds","successTag","ifPlural","DialogBody","PythonErrorInfo","COLOR_MAP","HoverColorMap","LiveTickTimeline","viewportWidth","ticks","minX","timeRange","onHoverTick","onSelectTick","exactRange","MINUTE","tickGrid","timeAfter","now","setNow","Date","isPaused","setPaused","useEffect","interval","setInterval","REFRESH_INTERVAL","clearInterval","maxX","showNowLine","fullRange","viewport","containerProps","useViewport","ticksReversed","filter","endTimestamp","reverse","ticksToDisplay","map","i","startX","getX","endX","isStuckStartedTick","Math","max","MIN_WIDTH","tickGridDelta","startTickGridX","ceil","numTicks","numLabels","gridTicks","ii","time","push","x","showLabel","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","Caption","Timestamp","ms","Tick","onMouseEnter","onMouseLeave","TickTooltip","id","NowIndicator","TimeAxisWrapper","memo","runs","startTime","dayjs","endTime","elapsedTime","to","as","unix","color","RUN_REQUEST_FRAGMENT","AutomationTargetList","assetSelection","automationType","targets","repoAddress","repo","useRepository","visibleTargets","isHiddenAssetGroupJob","target","pipelineName","AssetSelectionTag","tooltipText","PipelineReference","pipelineHrefContext","isJob","isThisThingAJob","showDialog","setShowDialog","assetsOrError","checks","assets","assetsWithAMP","assetsWithoutAMP","nodes","assetChecks","slice","sort","sortItemAssetCheck","a","key","sortItemAssetKey","asset","definition","automationCondition","selectedTab","setSelectedTab","initialTab","assetSelectionString","isAllAssets","ALL_ASSETS_STRING","Link","assetDetailsPathForKey","displayNameForAssetKey","assetDetailsPathForAssetCheck","labelForAssetCheck","splitConditioned","SensorType","AUTO_MATERIALIZE","AUTOMATION","canOutsideClickClose","canEscapeKeyClose","horizontal","border","Subtitle2","Mono","top","Tabs","size","selectedTabId","Tab","disabled","maxHeight","minHeight","VirtualizedItemListForDialog","items","renderItem","renderItemAssetCheck","itemBorders","renderItemAssetKey","showCustomAlert","body","YAML_SYNTAX_INVALID","onlyKeyAndValue","value","buildExecutionParamsListSensor","sensorExecutionData","sensorSelector","jobName","executionParamsList","evaluationResult","forEach","request","configYamlOrEmpty","sanitizeConfigYamlString","runConfigYaml","yaml","repositoryLocationName","repositoryName","executionParams","runConfigData","selector","asAssetKeyInput","assetCheckSelection","asAssetCheckHandleInput","solidSelection","mode","executionMetadata","tags","scheduleExecutionData","scheduleSelector","runRequests","RunRequestTable","selectedRequest","setSelectedRequest","visibleDialog","setVisibleDialog","tbody","data-testid","testId","index","tr","runKey","td","verticalAlign","showIcon","textAlign","PreviewButton","RunConfigDialog","Table","borderRight","tableLayout","thead","th","placement","Chart","register","zoomPlugin","TickStatusDisplay","STATUS_DISPLAY_MAP","TicksTable","queryResult","showLogsForTick","tabs","setTimerange","setParentStatuses","setTickStatus","useQueryPersistedState","queryKey","defaults","showDetailsForTick","setShowDetailsForTick","setShowLogsForTick","repoAddressToSelector","statuses","React","paginationProps","useCursorPaginatedQuery","nextCursorForResult","PAGE_SIZE","getResultArray","query","TICK_HISTORY_QUERY","pageSize","useQueryRefreshAtInterval","FIFTEEN_SECONDS","state","hasPrevCursor","start","end","Array","from","reset","Spinner","purpose","StatusFilter","onChange","TableWrapper","InstigationType","SENSOR","TickRow","onShowDetails","onShowLogs","marginTop","CursorHistoryControls","TickDetailsDialog","activeItem","find","Select","popoverProps","filterable","itemRenderer","item","props","MenuItem","active","modifiers","handleClick","text","itemListRenderer","filteredItems","renderedItems","Boolean","Menu","onItemSelect","display","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","encode","decode","qs","pollingPaused","pausePolling","limit","Subheading","onTickClick","onTickHover","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","showTimezone","TimeElapsed","startUnix","endUnix","cursor","fontFamily","FontFamily","monospace","fontSize","overflow","MiddleTruncate","humanizeSensorCursor","CopyIconButton","RunStatusLink","run","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","SensorInfo","sensorDaemonStatus","assetDaemonStatus","boxProps","warnForSensor","healthy","required","warnForAssets","Alert","rel","SensorPreviousRuns","sensor","DagsterTag","SensorName","RepositoryLabelTag","repoAddressAsTag","RunsFeedTableWithFilters","includeRunsFromBackfills","actionBarComponents","SensorRoot","selectionQueryResult","useTrackPageView","sensorName","useParams","useDocumentTitle","setStatuses","view","raw","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","refreshState","useMergedRefresh","ButtonGroup","activeItems","Set","buttons","margin","sensorOrError","Redirect","instance","isAutomationSensor","sensorType","daemonHealth","SensorDetails","INSTANCE_HEALTH_FRAGMENT","useLaunchMultipleRunsWithTelemetry","launchMultipleRuns","useMutation","LAUNCH_MULTIPLE_RUNS_MUTATION","logTelemetry","useTelemetryAction","history","useHistory","useCallback","behavior","isArray","jobNames","params","includes","metadata","opSelection","finalized","paramsWithUIExecutionTags","result","handleLaunchMultipleResult","TelemetryAction","LAUNCH_MULTIPLE_RUNS","console","showLaunchError","THREE_DAYS","type","reduce","sum","partitionKeys","SensorAlertDetails","SensorMonitoredAssets","assetKeys","AssetLink","path","join","SensorResetButton","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","location","resetSensor","toggleOnInFlight","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","wordBreak","DynamicPartitionRequests","includeTitle","rows","partitionsDefName","def","grow","SensorDryRunDialog","SensorDryRun","currentCursor","trackEvent","useTrackEvent","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursorMutation","SET_CURSOR_MUTATION","createPartition","CREATE_PARTITION_MUTATION","deletePartition","DELETE_DYNAMIC_PARTITIONS_MUTATION","setCursor","submitting","setSubmitting","launching","setLaunching","setError","setSensorExecutionData","dynamicPartitionRequests","dynamicPartitionsRequests","submitTest","selectorData","assertUnreachable","onCommitTickResult","setSensorCursor","showSharedToaster","Group","spacing","underline","launchMultipleRunsWithTelemetry","canApply","onApply","Promise","all","partitionKey","repositorySelector","e","leftButtons","rightButtons","numRunRequests","didSkip","canShow","Grid","pre","marginBottom","SkipReasonNonIdealStateWrapper","br","ComputedCursorGrid","TextInput","placeholder","left","NonIdealStateWrapper","EvaluateTickButtonSensor","showTestTickDialog","setShowTestTickDialog","STANDARD","TIME_FORMAT","startsWith","cursorObj","JSON","parse","Object","entries","pair","k","v","sensorState","disabledReasons","loadingPermissions","canUpdateSensorCursor","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","running","InstigationStatus","RUNNING","PageHeader","Subtitle1","flexDirection","RepositoryLink","right","QueryRefreshCountdown","MetadataTableWIP","owners","DefinitionOwners","nextTick","TargetCell","SensorSwitch","canReset","humanizeSensorInterval","minIntervalSeconds","EditCursorDialog"],"sourceRoot":"","ignoreList":[]}