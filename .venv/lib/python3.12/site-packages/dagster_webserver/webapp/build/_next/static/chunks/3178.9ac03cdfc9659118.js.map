{"version":3,"file":"static/chunks/3178.9ac03cdfc9659118.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetCheckTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunAlertNotifications.oss.tsx","webpack://_N_E/../ui-core/src/runs/RunPoolsDialog.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  SplitPanelContainerHandle,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {memo, useLayoutEffect, useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {runsPathWithFilters} from './RunsFilterInput';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {CompletionType, useTraceDependency} from '../performance/TraceContext';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = memo((props: RunProps) => {\n  const {run, runId} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  const logsDependency = useTraceDependency('RunLogs');\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded dependency={logsDependency} logs={logs} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n});\n\nconst OnLogsLoaded = ({\n  dependency,\n  logs,\n}: {\n  dependency: ReturnType<typeof useTraceDependency>;\n  logs: LogsProviderLogs;\n}) => {\n  useLayoutEffect(() => {\n    if (!logs.loading) {\n      dependency.completeDependency(CompletionType.SUCCESS);\n    }\n  }, [dependency, logs]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterRunSelectionByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const selection = useMemo(\n    () => ({\n      query: selectionQuery,\n      keys: selectionStepKeys,\n    }),\n    [selectionStepKeys, selectionQuery],\n  );\n\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = useMemo(\n    () =>\n      runtimeGraph\n        ? logsFilter.logQuery\n            .filter((v) => v.token && v.token === 'query')\n            .reduce((accum, v) => {\n              accum.push(\n                ...filterRunSelectionByQuery(runtimeGraph, v.value).all.map((n) => n.name),\n              );\n              return accum;\n            }, [] as string[])\n        : [],\n    [logsFilter.logQuery, runtimeGraph],\n  );\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let nextSelectionQuery = selectionQuery;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        nextSelectionQuery = removeStepFromSelection(nextSelectionQuery, stepKey);\n      } else {\n        // select the step otherwise\n        nextSelectionQuery = addStepToSelection(nextSelectionQuery, stepKey);\n      }\n    } else {\n      // deselect the step if already selected\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        nextSelectionQuery = '';\n      } else {\n        // select the step otherwise\n        nextSelectionQuery = `name:\"${stepKey}\"`;\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        if (matchingLogKey) {\n          setComputeLogFileKey(matchingLogKey);\n        }\n      }\n    }\n\n    onSetSelectionQuery(nextSelectionQuery);\n  };\n\n  const [expandedPanel, setExpandedPanel] = useState<null | 'top' | 'bottom'>(null);\n  const containerRef = useRef<SplitPanelContainerHandle>(null);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      const size = containerRef.current.getSize();\n      if (size === 100) {\n        setExpandedPanel('top');\n      } else if (size === 0) {\n        setExpandedPanel('bottom');\n      }\n    }\n  }, []);\n\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    containerRef.current?.changeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    containerRef.current?.changeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    containerRef.current?.changeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={selection}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={selection}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  const logContent = () => {\n    if (run?.status === 'QUEUED') {\n      return (\n        <NonIdealState\n          icon=\"arrow_forward\"\n          title=\"Run queued\"\n          description=\"This run is queued for execution and will start soon.\"\n          action={\n            <Link to={runsPathWithFilters([{token: 'status', value: 'QUEUED'}])}>\n              View queued runs\n            </Link>\n          }\n        />\n      );\n    }\n    if (logType === LogType.structured) {\n      return (\n        <LogsScrollingTable\n          logs={logs}\n          filter={logsFilter}\n          filterStepKeys={logsFilterStepKeys}\n          filterKey={`${JSON.stringify(logsFilter)}`}\n          metadata={metadata}\n        />\n      );\n    }\n    if (computeLogFileKey) {\n      return (\n        <CapturedOrExternalLogPanel\n          logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n          logCaptureInfo={logCaptureInfo}\n          visibleIOType={LogType[logType]}\n          onSetDownloadUrl={setComputeLogUrl}\n        />\n      );\n    }\n    return <NoStepSelectionState type={logType} />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={containerRef}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        secondMinSize={56}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logContent()}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n\nfunction removeStepFromSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) and not name:\"${stepKey}\"`;\n}\n\nfunction addStepToSelection(selectionQuery: string, stepKey: string) {\n  return `(${selectionQuery}) or name:\"${stepKey}\"`;\n}\n","import {AssetCheckTagCollection} from './AssetTagCollections';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetChecksQuery, RunAssetChecksQueryVariables} from './types/RunAssetCheckTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetCheckTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetChecksQuery, RunAssetChecksQueryVariables>(\n    RUN_ASSETS_CHECKS_QUERY,\n    {\n      variables: {runId: run.id},\n      skip,\n    },\n  );\n  const {data, loading} = queryResult;\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  const assetChecks = skip ? run.assetCheckSelection : data.pipelineRunOrError.assetChecks;\n\n  return <AssetCheckTagCollection assetChecks={assetChecks} />;\n};\n\nconst RUN_ASSETS_CHECKS_QUERY = gql`\n  query RunAssetChecksQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assetChecks {\n          name\n          assetKey {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMemo} from 'react';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {assetKeysForRun} from './RunUtils';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const skip = isHiddenAssetGroupJob(run.pipelineName);\n  const queryResult = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip,\n    fetchPolicy: 'no-cache',\n  });\n\n  const assetKeys = useMemo(() => {\n    const {data} = queryResult;\n    let keys = null;\n    if (data?.pipelineRunOrError.__typename === 'Run') {\n      keys = data.pipelineRunOrError.assets.map((a) => a.key);\n    }\n\n    return skip ? assetKeysForRun(run) : keys;\n  }, [queryResult, run, skip]);\n\n  return <AssetKeyTagCollection useTags assetKeys={assetKeys} />;\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","export const RunAlertNotifications = (_props: {runId: string}) => null;\n","import {Box, Button, Dialog, DialogFooter} from '@dagster-io/ui-components';\n\nimport {PoolTag} from '../instance/PoolTag';\n\nexport const RunPoolsDialog = ({\n  isOpen,\n  onClose,\n  pools,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  pools: string[];\n}) => {\n  return (\n    <Dialog isOpen={isOpen} onClose={onClose} canOutsideClickClose canEscapeKeyClose title=\"Pools\">\n      <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12}}>\n        {pools.map((pool) => (\n          <PoolTag key={pool} pool={pool} />\n        ))}\n      </Box>\n      <DialogFooter topBorder>\n        <Button onClick={onClose} intent=\"primary\">\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {RunAlertNotifications} from 'shared/runs/RunAlertNotifications.oss';\nimport {RunMetricsDialog} from 'shared/runs/RunMetricsDialog.oss';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {QueuedRunCriteriaDialog} from './QueuedRunCriteriaDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {RunPoolsDialog} from './RunPoolsDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {useMutation} from '../apollo-client';\nimport {isExternalRun} from './externalRuns';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {RunStatus} from '../graphql/types';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrencyKeyInfo';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrencyKeyInfo.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog =\n  | 'config'\n  | 'delete'\n  | 'terminate'\n  | 'queue-criteria'\n  | 'free_slots'\n  | 'metrics'\n  | 'pools'\n  | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const runMetricsEnabled = run.hasRunMetricsEnabled;\n\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        <RunAlertNotifications runId={run.id} />\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        {run.allPools && run.allPools.length ? (\n          <Tooltip content=\"View pools\" position=\"top\" targetTagName=\"div\">\n            <Button icon={<Icon name=\"concurrency\" />} onClick={() => setVisibleDialog('pools')} />\n          </Tooltip>\n        ) : null}\n        {!isExternalRun(run) || run.hasDeletePermission ? (\n          <Popover\n            position=\"bottom-right\"\n            content={\n              <Menu>\n                {!isExternalRun(run) ? (\n                  <>\n                    <Tooltip\n                      content=\"Loadable in dagster-webserver-debug\"\n                      position=\"left\"\n                      targetTagName=\"div\"\n                    >\n                      <MenuItem\n                        text=\"Download debug file\"\n                        icon=\"download_for_offline\"\n                        // eslint-disable-next-line no-restricted-properties\n                        onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                      />\n                    </Tooltip>\n                    {run.status === RunStatus.QUEUED ? (\n                      <MenuItem\n                        tagName=\"button\"\n                        icon=\"history_toggle_off\"\n                        text=\"View queue criteria\"\n                        intent=\"none\"\n                        onClick={() => setVisibleDialog('queue-criteria')}\n                      />\n                    ) : null}\n                    {runMetricsEnabled && RunMetricsDialog ? (\n                      <MenuItem\n                        tagName=\"button\"\n                        icon=\"asset_plot\"\n                        text=\"View container metrics\"\n                        intent=\"none\"\n                        onClick={() => setVisibleDialog('metrics')}\n                      />\n                    ) : null}\n                    {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                      <MenuItem\n                        text=\"Free concurrency slots\"\n                        icon=\"lock\"\n                        onClick={freeConcurrencySlots}\n                      />\n                    ) : null}\n                  </>\n                ) : null}\n                {run.hasDeletePermission ? (\n                  <MenuItem\n                    icon=\"delete\"\n                    text=\"Delete\"\n                    intent=\"danger\"\n                    onClick={() => setVisibleDialog('delete')}\n                  />\n                ) : null}\n              </Menu>\n            }\n          >\n            <Button icon={<Icon name=\"expand_more\" />} />\n          </Popover>\n        ) : null}\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.status === RunStatus.QUEUED ? (\n        <QueuedRunCriteriaDialog\n          run={run}\n          isOpen={visibleDialog === 'queue-criteria'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {runMetricsEnabled && RunMetricsDialog ? (\n        <RunMetricsDialog\n          runId={run.id}\n          isOpen={visibleDialog === 'metrics'}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.allPools && run.allPools.length ? (\n        <RunPoolsDialog\n          isOpen={visibleDialog === 'pools'}\n          pools={run.allPools}\n          onClose={() => setVisibleDialog(null)}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {Box, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TagActionsPopover} from '../ui/TagActions';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [showDetails, setShowDetails] = useState(false);\n  const [showLogs, setShowLogs] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name, repositoryName, repositoryLocationName} = instigationSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  const actions = [\n    {\n      label: `View ${instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensor'}`,\n      to: workspacePathFromAddress(\n        repoAddress,\n        `${instigationType === DagsterTag.ScheduleName ? '/schedules' : '/sensors'}/${name}`,\n      ),\n    },\n    {\n      label: 'View tick details',\n      onClick: () => setShowDetails(true),\n    },\n    {\n      label: 'View tick logs',\n      onClick: () => setShowLogs(true),\n    },\n  ];\n\n  return (\n    <>\n      <TagActionsPopover actions={actions} data={{key: 'Launched by', value: name}}>\n        <Tag icon={icon}>\n          <Box flex={{direction: 'row'}}>\n            <span>Launched by&nbsp;</span>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </Box>\n        </Tag>\n      </TagActionsPopover>\n      <TickDetailsDialog\n        isOpen={showDetails}\n        tickResultType=\"runs\"\n        onClose={() => setShowDetails(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n      <TickLogDialog\n        isOpen={showLogs}\n        onClose={() => setShowLogs(false)}\n        instigationSelector={instigationSelector}\n        tickId={tickId}\n      />\n    </>\n  );\n};\n","import {Box, ButtonLink, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {EvaluationDetailDialog} from './AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ntype OpenEvaluation = {\n  assetKeyPath: string[];\n  evaluationId: string;\n};\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const [openEvaluation, setOpenEvaluation] = useState<OpenEvaluation | null>(null);\n\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <>\n      <Popover\n        placement=\"bottom\"\n        content={\n          <div style={{width: '400px'}}>\n            <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n              Automation condition\n            </Box>\n            <Box\n              flex={{direction: 'column', gap: 16}}\n              padding={{vertical: 12}}\n              style={{maxHeight: '220px', overflowY: 'auto'}}\n            >\n              {sortedKeys.map((assetKey) => {\n                const url = assetDetailsPathForKey(assetKey, {\n                  view: 'automation',\n                  evaluation: evaluationId,\n                });\n                return (\n                  <Box\n                    key={url}\n                    padding={{vertical: 8, left: 12, right: 16}}\n                    flex={{\n                      direction: 'row',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      gap: 16,\n                    }}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{overflow: 'hidden'}}\n                    >\n                      <Icon name=\"asset\" />\n                      <MiddleTruncate text={assetKey.path.join('/')} />\n                    </Box>\n                    <ButtonLink\n                      onClick={() => setOpenEvaluation({assetKeyPath: assetKey.path, evaluationId})}\n                      style={{whiteSpace: 'nowrap'}}\n                    >\n                      View evaluation\n                    </ButtonLink>\n                  </Box>\n                );\n              })}\n            </Box>\n          </div>\n        }\n        interactionKind=\"hover\"\n      >\n        <Tag icon=\"automation_condition\">Automation condition</Tag>\n      </Popover>\n      <EvaluationDetailDialog\n        assetKeyPath={openEvaluation?.assetKeyPath ?? []}\n        isOpen={!!openEvaluation}\n        onClose={() => setOpenEvaluation(null)}\n        evaluationID={openEvaluation?.evaluationId ?? ''}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Colors,\n  FontFamily,\n  Icon,\n  NonIdealState,\n  PageHeader,\n  Subtitle1,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {Run} from './Run';\nimport {RunAssetCheckTags} from './RunAssetCheckTags';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag, RunTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {getBackfillPath} from './RunsFeedUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {getExternalRunUrl, isExternalRun} from './externalRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunPageFragment} from './types/RunFragments.types';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const queryResult = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n  const {data, loading} = queryResult;\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  const partitionTag = run?.tags.find((tag) => tag.key === DagsterTag.Partition);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={<RunHeaderTitle run={run} runId={runId} />}\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {partitionTag && <RunTag tag={partitionTag} />}\n                <RunAssetTags run={run} />\n                <RunAssetCheckTags run={run} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string}) => {\n  const {data, runId} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return null;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  if (isExternalRun(data.pipelineRunOrError)) {\n    const externalUrl = getExternalRunUrl(data.pipelineRunOrError);\n    if (externalUrl) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"job\"\n            title=\"This run was remotely executed\"\n            description={\n              <Box flex={{direction: 'row', alignItems: 'center'}}>\n                <a href={externalUrl} target=\"_blank\" rel=\"noreferrer\">\n                  View the execution logs\n                </a>\n                <Icon name=\"open_in_new\" size={16} style={{marginLeft: 8}} />\n              </Box>\n            }\n          />\n        </Box>\n      );\n    } else {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"job\"\n            title=\"No external URL found\"\n            description=\"This run was executed externally, but does not have an external URL.\"\n          />\n        </Box>\n      );\n    }\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n\nconst RunHeaderTitle = ({run, runId}: {run: RunPageFragment | null; runId: string}) => {\n  const backfillTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.Backfill),\n    [run],\n  );\n\n  if (backfillTag) {\n    return (\n      <Subtitle1>\n        <Link to=\"/runs\" style={{color: Colors.textLight()}}>\n          Runs\n        </Link>\n        {' / '}\n        <Link to={getBackfillPath(backfillTag.value, 'runs')} style={{color: Colors.textLight()}}>\n          {backfillTag.value}\n        </Link>\n        {' / '}\n        {runId.slice(0, 8)}\n      </Subtitle1>\n    );\n  }\n\n  return (\n    <Subtitle1 style={{display: 'flex', flexDirection: 'row', gap: 6}}>\n      <Link to=\"/runs\">Runs</Link>\n      <span>/</span>\n      <span style={{fontFamily: FontFamily.monospace}}>{runId.slice(0, 8)}</span>\n    </Subtitle1>\n  );\n};\n","import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = selection.keys.map((k) => `name:\"${k}\"+`).join(' or ');\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  const fromAssetFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From asset failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, selecting only assets that did not complete successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_ASSET_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [\n    full,\n    same,\n    selected,\n    fromSelected,\n    fromFailure,\n    run.executionPlan?.assetKeys.length ? fromAssetFailure : null,\n  ].filter(Boolean) as LaunchButtonConfiguration[];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n"],"names":["TickLogDialog","tickId","timestamp","instigationSelector","isOpen","onClose","Dialog","style","width","maxWidth","minWidth","title","span","name","TimestampDisplay","timeFormat","showSeconds","QueryfulTickLogsTable","Box","background","Colors","zIndex","position","DialogFooter","topBorder","Button","onClick","data","loading","useQuery","TICK_LOG_EVENTS_QUERY","variables","notifyOnNetworkStatusChange","events","instigationStateOrError","__typename","tick","logEvents","undefined","height","flex","justifyContent","alignItems","SpinnerWithText","label","length","direction","InstigationEventLogTable","tickStatus","status","instigationType","instigationLoggingDocsUrl","padding","vertical","NonIdealState","icon","description","gap","div","action","ExternalAnchorButton","href","rightIcon","Icon","gql","INSTIGATION_EVENT_LOG_FRAGMENT","Run","memo","run","runId","props","logsFilter","setLogsFilter","useQueryPersistedLogFilter","selectionQuery","setSelectionQuery","useQueryPersistedState","queryKey","defaults","selection","useFavicon","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","runStatusFavicon","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","onShowStateDetails","stepKey","logs","errorNode","find","node","showCustomAlert","body","PythonErrorInfo","error","onSetSelectionQuery","query","logQuery","token","value","logsDependency","useTraceDependency","RunContext","Provider","LogsProvider","OnLogsLoaded","dependency","RunMetadataProvider","RunWithData","metadata","onSetLogsFilter","useLayoutEffect","completeDependency","CompletionType","queryLogType","setQueryLogType","logType","LogType","structured","logTypeFromQuery","stdout","stderr","computeLogUrl","setComputeLogUrl","useState","stepKeysJSON","JSON","stringify","Object","keys","steps","sort","stepKeys","useMemo","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterRunSelectionByQuery","all","map","n","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","useComputeLogFileKeyForSelection","defaultToFirstStep","logsFilterStepKeys","filter","v","reduce","accum","push","onClickStep","evt","index","indexOf","nextSelectionQuery","shiftKey","removeStepFromSelection","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","expandedPanel","setExpandedPanel","containerRef","useRef","current","size","getSize","isTopExpanded","isBottomExpanded","expandTopPanel","changeSize","resetPanels","SplitPanelContainer","ref","axis","identifier","firstInitialPercent","firstMinSize","first","gantt","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Tooltip","content","RunActionButtons","graph","onSetSelection","focusedTime","GanttChartLoadingState","secondMinSize","second","LogsContainer","LogsToolbar","onSetLogType","setLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","expandBottomPanel","Link","to","runsPathWithFilters","LogsScrollingTable","filterStepKeys","filterKey","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","NoStepSelectionState","type","styled","grow","RunAssetCheckTags","skip","queryResult","RUN_ASSETS_CHECKS_QUERY","id","pipelineRunOrError","assetChecks","assetCheckSelection","AssetCheckTagCollection","RunAssetTags","RUN_ASSETS_QUERY","fetchPolicy","assetKeys","assets","a","key","assetKeysForRun","AssetKeyTagCollection","useTags","RunAlertNotifications","RunPoolsDialog","pools","canOutsideClickClose","canEscapeKeyClose","margin","horizontal","PoolTag","pool","intent","RunHeaderActions","isJob","runMetricsEnabled","hasRunMetricsEnabled","visibleDialog","setVisibleDialog","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","freeConcurrencySlots","resp","showSharedToaster","message","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","AnchorButton","allPools","targetTagName","isExternalRun","hasDeletePermission","Popover","Menu","MenuItem","text","window","open","QUEUED","tagName","RunMetricsDialog","hasConcurrencyKeySlots","doneStatuses","has","RunConfigDialog","runConfigYaml","tags","QueuedRunCriteriaDialog","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","selectedRuns","canTerminate","hasTerminatePermission","TerminationDialog","RunTimingTags","startTime","interactionKind","placement","RunTimingDetails","Tag","showTimezone","updateTime","endTime","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","showDetails","setShowDetails","showLogs","setShowLogs","DagsterTag","ScheduleName","repoAddress","buildRepoAddress","actions","workspacePathFromAddress","TagActionsPopover","MiddleTruncate","TickDetailsDialog","tickResultType","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","openEvaluation","evaluationId","setOpenEvaluation","sortedKeys","b","compare","join","border","fontWeight","maxHeight","overflowY","url","assetDetailsPathForKey","assetKey","view","evaluation","left","right","overflow","ButtonLink","assetKeyPath","whiteSpace","EvaluationDetailDialog","evaluationID","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","match","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","AssetEvaluationID","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","partitionTag","Partition","display","flexDirection","PageHeader","RunHeaderTitle","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","RunTag","assetSelection","RunById","externalUrl","getExternalRunUrl","target","rel","marginLeft","RUN_PAGE_FRAGMENT","backfillTag","Backfill","Subtitle1","color","getBackfillPath","fontFamily","FontFamily","monospace","CancelRunButton","showDialog","setShowDialog","closeDialog","useCallback","result","errors","stepSelectionWithState","stepStates","state","IStepState","PREPARING","present","failed","includes","FAILED","finished","every","SUCCEEDED","stepState","canRunAllSteps","failedStatuses","jobError","useJobAvailabilityErrorForRun","artifactsPersisted","currentRunSelection","t","StepSelection","filterByQuery","k","currentRunIsFromFailure","some","IsResumeRetry","reexecute","useJobReexecution","reexecuteWithSelection","executionParams","getReexecutionParamsForSelection","full","scope","tooltip","ReexecutionStrategy","ALL_STEPS","e","same","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","selectionForUIFiltering","selectionKeys","fromFailureEnabled","canRunFromFailure","fromFailure","FROM_FAILURE","forEach","option","fromAssetFailure","FROM_ASSET_FAILURE","Boolean","preferredRerun","primary","LaunchButtonDropdown","runCount","DEFAULT_DISABLED_REASON","hasReExecutePermission","launchpadElement","paddingLeft","step"],"sourceRoot":"","ignoreList":[]}