{"version":3,"file":"static/chunks/8028.4169d9eb43201f1d.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-core/src/workspace/SingleJobQuery.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedObserveJobRow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx"],"sourcesContent":["import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\nimport {PezItem} from '../ui/PezItem';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n  forceCount?: number;\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs, forceCount} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n\n  let items: (RunTimeFragment | null)[] = [...runs];\n  if (forceCount) {\n    if (forceCount > items.length) {\n      items.unshift(...Array(forceCount - items.length).fill(null));\n    } else {\n      items = items.slice(0, forceCount);\n    }\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {items.map((run, ii) => {\n        const opacity = fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0;\n        if (!run) {\n          return (\n            <PezItem key={`empty-${ii}`} color={Colors.backgroundLighter()} opacity={opacity} />\n          );\n        }\n\n        return (\n          <Popover\n            key={run.id}\n            position=\"top\"\n            interactionKind=\"hover\"\n            content={\n              <div>\n                <RunStatusOverlay run={run} name={jobName} />\n              </div>\n            }\n            hoverOpenDelay={100}\n          >\n            <PezItem key={run.id} color={RUN_STATUS_COLORS[run.status]} opacity={opacity} />\n          </Popover>\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 240px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = selection.keys.map((k) => `name:\"${k}\"+`).join(' or ');\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  const fromAssetFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From asset failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, selecting only assets that did not complete successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_ASSET_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [\n    full,\n    same,\n    selected,\n    fromSelected,\n    fromFailure,\n    run.executionPlan?.assetKeys.length ? fromAssetFailure : null,\n  ].filter(Boolean) as LaunchButtonConfiguration[];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: {id: string}[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const reexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      {reexecute.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"more_horiz\" />} intent=\"none\" />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        tags {\n          key\n          value\n        }\n        executionPlan {\n          artifactsPersisted\n          assetKeys {\n            path\n          }\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate, useDelayedState} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\nimport {HeaderCell, HeaderRow, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  index: number;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {name, isJob, repoAddress, index} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    return (\n      <div data-index={index} ref={ref}>\n        <RowGrid border=\"bottom\">\n          <RowCell>\n            <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </div>\n            <CaptionText>{pipeline?.description || ''}</CaptionText>\n          </RowCell>\n          <RowCell>\n            {schedules.length || sensors.length ? (\n              <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n                <ScheduleSensorTagContainer>\n                  <ScheduleOrSensorTag\n                    schedules={schedules}\n                    sensors={sensors}\n                    repoAddress={repoAddress}\n                  />\n                </ScheduleSensorTagContainer>\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns[0] ? (\n              <LastRunSummary\n                run={latestRuns[0]}\n                showButton={false}\n                showHover\n                showSummary={false}\n                name={name}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns.length ? (\n              <Box padding={{top: 4}}>\n                <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n              <JobMenu\n                job={{name, isJob, runs: latestRuns}}\n                isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                repoAddress={repoAddress}\n              />\n            </Box>\n          </RowCell>\n        </RowGrid>\n      </div>\n    );\n  },\n);\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp5-popover-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {gql} from '../apollo-client';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\n\nexport const SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  MiddleTruncate,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {SINGLE_JOB_QUERY} from './SingleJobQuery';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {JobMenu} from '../instance/JobMenu';\nimport {RunStatusOverlay, RunStatusPezList} from '../runs/RunStatusPez';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitchFragment.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitchFragment.types';\n\ninterface JobRowProps {\n  index: number;\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedObserveJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, isJob, repoAddress} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    const right = () => {\n      if (queryResult.loading && !queryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <TimeFromNow unixTimestamp={latestRuns[0].startTime} showTooltip={false} />\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'runs',\n              control: (\n                <Box padding={{horizontal: 8}}>\n                  <RunStatusPezList\n                    jobName={name}\n                    runs={[...latestRuns].reverse()}\n                    fade\n                    forceCount={5}\n                  />\n                </Box>\n              ),\n            },\n            {\n              key: 'schedules',\n              control:\n                schedules.length > 0 ? (\n                  <AutomationButton\n                    type=\"schedule\"\n                    enabled={schedules.some(\n                      (schedule) => schedule.scheduleState.status === 'RUNNING',\n                    )}\n                    automations={schedules}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'sensors',\n              control:\n                sensors.length > 0 ? (\n                  <AutomationButton\n                    type=\"sensor\"\n                    enabled={sensors.some((sensor) => sensor.sensorState.status === 'RUNNING')}\n                    automations={sensors}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'automations',\n              control:\n                sensors.length === 0 && schedules.length === 0 ? (\n                  <Tooltip content=\"No automations\" placement=\"top\">\n                    <AutomationButton type=\"none\" />\n                  </Tooltip>\n                ) : null,\n            },\n            {\n              key: 'menu',\n              control: (\n                <JobMenu\n                  job={{name, isJob, runs: latestRuns}}\n                  isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                  repoAddress={repoAddress}\n                />\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <Icon name=\"job\" />\n              {name}\n            </Box>\n            {pipeline?.description ? (\n              <Tooltip\n                content={<div style={{width: 320}}>{pipeline.description}</div>}\n                placement=\"top\"\n              >\n                <Icon name=\"info\" color={Colors.textLight()} />\n              </Tooltip>\n            ) : null}\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\ntype AutomationType = 'sensor' | 'schedule' | 'none';\n\ninterface AutomationButtonProps {\n  type: AutomationType;\n  enabled?: boolean;\n  automations?: ScheduleSwitchFragment[] | SensorSwitchFragment[];\n  repoAddress?: RepoAddress;\n}\n\nconst AutomationButton = ({type, automations, enabled, repoAddress}: AutomationButtonProps) => {\n  const icon = () => {\n    if (type === 'none') {\n      return <Icon name=\"status\" color={Colors.accentGray()} />;\n    }\n\n    return <Icon name={type} color={enabled ? Colors.accentGreen() : Colors.accentGray()} />;\n  };\n\n  const button = (\n    <HoverButton>\n      <Box padding={{vertical: 2}}>{icon()}</Box>\n    </HoverButton>\n  );\n\n  if (type === 'none') {\n    return button;\n  }\n\n  const count = automations?.length || 0;\n  const headerText =\n    type === 'sensor'\n      ? count === 1\n        ? '1 sensor'\n        : `${count} sensors`\n      : count === 1\n        ? '1 schedule'\n        : `${count} schedules`;\n\n  return (\n    <Popover\n      position=\"top\"\n      interactionKind=\"hover\"\n      content={\n        <Box\n          flex={{direction: 'column'}}\n          style={{width: 320, overflowX: 'hidden'}}\n          background={Colors.backgroundLighter()}\n        >\n          <Box\n            flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n            padding={{vertical: 12, horizontal: 12}}\n            border=\"bottom\"\n          >\n            <strong style={{fontSize: 14}}>{headerText}</strong>\n          </Box>\n          <div style={{overflowY: 'auto', maxHeight: 240}}>\n            {automations?.length && repoAddress ? (\n              automations.map((automation, ii) => {\n                const displayName =\n                  automation.__typename === 'Sensor'\n                    ? automation.name\n                    : humanCronString(automation.cronSchedule, {\n                        longTimezoneName: automation.executionTimezone || 'UTC',\n                      });\n                return (\n                  <Box\n                    key={automation.id + '-' + ii}\n                    flex={{\n                      direction: 'row',\n                      gap: 12,\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                    }}\n                    padding={12}\n                    border={ii === 0 ? null : 'top'}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{width: '100%', overflow: 'hidden'}}\n                    >\n                      <Icon name={automation.__typename === 'Schedule' ? 'schedule' : 'sensor'} />\n                      <Link\n                        to={workspacePathFromAddress(\n                          repoAddress,\n                          automation.__typename === 'Schedule'\n                            ? `/schedules/${automation.name}`\n                            : `/sensors/${automation.name}`,\n                        )}\n                        style={{flex: 1, overflow: 'hidden', width: '100%'}}\n                      >\n                        <MiddleTruncate text={displayName} />\n                      </Link>\n                    </Box>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      {automation.__typename === 'Schedule' ? (\n                        <ScheduleSwitch schedule={automation} repoAddress={repoAddress} />\n                      ) : (\n                        <SensorSwitch sensor={automation} repoAddress={repoAddress} />\n                      )}\n                    </Box>\n                  </Box>\n                );\n              })\n            ) : (\n              <div>No automations</div>\n            )}\n          </div>\n        </Box>\n      }\n      hoverOpenDelay={100}\n    >\n      {button}\n    </Popover>\n  );\n};\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {useFeatureFlags} from '../app/useFeatureFlags';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {VirtualizedObserveJobRow} from '../workspace/VirtualizedObserveJobRow';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const {flagUseNewObserveUIs} = useFeatureFlags();\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        {flagUseNewObserveUIs ? null : <VirtualizedJobHeader />}\n        <Inner $totalHeight={totalHeight}>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              transform: `translateY(${items[0]?.start ?? 0}px)`,\n            }}\n          >\n            {items.map(({index, key}) => {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const row: RowType = flattened[index]!;\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const type = row!.type;\n\n              if (type === 'header') {\n                return (\n                  <DynamicRepoRow\n                    key={key}\n                    repoAddress={row.repoAddress}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={<></>}\n                  />\n                );\n              }\n\n              if (flagUseNewObserveUIs) {\n                return (\n                  <VirtualizedObserveJobRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.name}\n                    isJob={row.isJob}\n                    repoAddress={row.repoAddress}\n                  />\n                );\n              }\n\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  index={index}\n                  ref={rowVirtualizer.measureElement}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                />\n              );\n            })}\n          </div>\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, SpinnerWithText} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {filterJobSelectionByQuery} from '../job-selection/AntlrJobSelection';\nimport {JobSelectionInput} from '../job-selection/input/JobSelectionInput';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const JobsPageContent = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loadingNonAssets: loading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const [selection, setSelection] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n    behavior: 'push',\n  });\n\n  const allJobs = useMemo(() => {\n    return repoBuckets.flatMap((bucket) => bucket.jobs);\n  }, [repoBuckets]);\n\n  const filteredJobs = useMemo(() => {\n    return filterJobSelectionByQuery(allJobs, selection).all;\n  }, [allJobs, selection]);\n\n  const filteredRepoBuckets = useMemo(() => {\n    return repoBuckets\n      .filter((bucket) => {\n        return Array.from(filteredJobs).some(\n          (job) =>\n            job.repo.name === bucket.repoAddress.name &&\n            job.repo.location === bucket.repoAddress.location,\n        );\n      })\n      .map((bucket) => ({\n        ...bucket,\n        jobs: bucket.jobs.filter((job) => {\n          return filteredJobs.has(job);\n        }),\n      }))\n      .filter((bucket) => !!bucket.jobs.length);\n  }, [repoBuckets, filteredJobs]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredRepoBuckets.length) {\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              repoBuckets.length\n                ? 'No jobs were found that match your filters'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredRepoBuckets} />;\n  };\n\n  return (\n    <>\n      <Box padding={{horizontal: 24, vertical: 12}} border=\"bottom\">\n        <JobSelectionInput items={allJobs} value={selection} onChange={setSelection} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64} flex={{direction: 'row', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((job) => ({\n          ...job,\n          repo: {\n            name: repoAddress.name,\n            location: repoAddress.location,\n          },\n        }));\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {Box, PageHeader, Subtitle1} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Subtitle1>Jobs</Subtitle1>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n"],"names":["StepSummaryForRun","props","runId","data","useQuery","queryResult","STEP_SUMMARY_FOR_RUN_QUERY","variables","run","pipelineRunOrError","status","__typename","relevantSteps","useMemo","failedStatuses","has","stepStats","filter","step","StepEventStatus","FAILURE","inProgressStatuses","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","color","Colors","Link","to","stepKey","gql","RunStatusPezList","fade","jobName","runs","forceCount","count","max","MIN_OPACITY_STEPS","items","countForStep","unshift","Array","fill","slice","Box","flex","direction","alignItems","gap","map","ii","opacity","MAX_OPACITY","Popover","position","interactionKind","content","div","RunStatusOverlay","name","hoverOpenDelay","PezItem","RUN_STATUS_COLORS","id","OverlayContainer","OverlayTitle","RunRow","RunStatusIndicator","CaptionMono","titleForRun","RunTime","RunStateSummary","SummaryContainer","styled","FontFamily","default","$color","$opacity","LastRunSummary","memo","showHover","showButton","showSummary","intent","RunStatus","SUCCESS","CANCELED","CANCELING","justifyContent","tag","tagElement","Tag","size","undefined","AnchorButton","CancelRunButton","canTerminate","showDialog","setShowDialog","useState","closeDialog","useCallback","onComplete","result","errors","error","showSharedToaster","message","icon","Button","Icon","disabled","onClick","TerminationDialog","isOpen","onClose","selectedRuns","stepSelectionWithState","selection","metadata","stepStates","keys","steps","key","state","IStepState","PREPARING","present","failed","includes","FAILED","finished","every","SUCCEEDED","stepState","canRunAllSteps","doneStatuses","executionPlan","graph","repoMatch","useRepositoryForRunWithParentSnapshot","jobError","useJobAvailabilityErrorForRun","artifactsPersisted","currentRunSelection","stepSelectionFromRunTags","tags","find","t","DagsterTag","StepSelection","filterByQuery","value","all","k","currentRunIsFromFailure","some","IsResumeRetry","reexecute","useJobReexecution","reexecuteWithSelection","pipelineSnapshotId","executionParams","getReexecutionParamsForSelection","repositoryLocationName","match","repositoryLocation","repositoryName","repository","full","scope","title","tooltip","ReexecutionStrategy","ALL_STEPS","e","shiftKey","same","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","join","selectionForUIFiltering","selectionKeys","filterRunSelectionByQuery","node","fromFailureEnabled","canRunFromFailure","fromFailure","FROM_FAILURE","forEach","option","options","assetKeys","fromAssetFailure","FROM_ASSET_FAILURE","Boolean","preferredRerun","primary","Group","spacing","LaunchButtonDropdown","runCount","DEFAULT_DISABLED_REASON","hasReExecutePermission","launchpadElement","style","paddingLeft","span","display","visibleRepoKeys","Set","visibleRepos","repoAddressAsHumanString","buildRepoAddress","JobMenu","job","isAssetJob","repoAddress","lastRun","pipelineSelector","pipelineName","location","materialize","useMaterializationAction","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","executeItem","MenuItem","text","loading","Spinner","purpose","MenuLink","workspacePipelinePath","repoName","repoLocation","isJob","path","reExecuteAllItem","reExecuteFromFailureItem","onOpened","Menu","Tooltip","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","forwardRef","ref","index","shouldQuery","useDelayedState","SINGLE_JOB_QUERY","selector","buildPipelineSelector","skip","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipeline","pipelineOrError","schedules","sensors","latestRuns","data-index","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","description","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","padding","top","reverse","marginTop","HeaderRow","templateColumns","sticky","HeaderCell","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","VirtualizedObserveJobRow","ListItem","href","renderLink","left","width","placement","right","Skeleton","$width","$height","HorizontalControls","controls","control","startTime","HoverButton","TimeFromNow","unixTimestamp","showTooltip","horizontal","AutomationButton","type","enabled","schedule","scheduleState","automations","sensor","sensorState","button","vertical","overflowX","background","strong","fontSize","headerText","overflowY","maxHeight","automation","displayName","humanCronString","cronSchedule","longTimezoneName","executionTimezone","overflow","ScheduleSwitch","SensorSwitch","OverviewJobsTable","repos","flagUseNewObserveUIs","useFeatureFlags","parentRef","useRef","allKeys","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","jobs","push","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","getVirtualItems","Container","VirtualizedJobHeader","Inner","$totalHeight","transform","start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","JobsPageContent","allRepos","loadingNonAssets","cachedData","useContext","WorkspaceContext","repoCount","repoBuckets","cachedEntries","Object","values","visibleKeys","buildBuckets","setSelection","useQueryPersistedState","queryKey","defaults","behavior","allJobs","flatMap","bucket","filteredJobs","filterJobSelectionByQuery","filteredRepoBuckets","from","repo","JobSelectionInput","onChange","SpinnerWithText","label","paddingTop","NonIdealState","entries","locationEntries","entry","locationOrLoadError","buckets","repositories","pipelines","isHiddenAssetGroupJob","sortRepoBuckets","JobsRoot","useTrackPageView","useDocumentTitle","height","PageHeader","Subtitle1"],"sourceRoot":"","ignoreList":[]}